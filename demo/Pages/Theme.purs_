module Demo.Pages.Theme where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Elevation as Elevation
import HalogenMWC.Theme as Theme
import HalogenMWC.Typography as Typography

data Model =
    {}

defaultModel :: Model
defaultModel =
    {}

data Msg
    = NoOp

update :: Msg -> Model -> Model
update w i model =
    model

view :: Model -> CatalogPage Msg
view model =
    { title: "Theme"
    , prelude: "Color in Material Design is inspired by bold hues juxtaposed with muted environments, deep shadows, and bright highlights."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-color-theming"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Theme"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-theme"
        }
    , hero =
        [ Button.text (Button.defaultConfig # Button.setAttributes heroMargin) "Text"
        , Button.raised (Button.defaultConfig # Button.setAttributes heroMargin) "Raised"
        , Button.outlined (Button.defaultConfig # Button.setAttributes heroMargin) "Outlined"
        ]
    , content =
        [ HH.legend [ Typography.subtitle1 ] [ HH.text "Theme colors as text" ]
        , themeColorsAsText
        , HH.legend [ Typography.subtitle1 ] [ HH.text "Theme colors as background" ]
        , themeColorsAsBackground
        , HH.legend [ Typography.subtitle1 ] [ HH.text "Text on background" ]
        , textOnBackground
        , HH.legend [ Typography.subtitle1 ] [ HH.text "Text on primary" ]
        , textOnPrimary
        , HH.legend [ Typography.subtitle1 ] [ HH.text "Text on secondary" ]
        , textOnSecondary
        , HH.legend [ Typography.subtitle1 ]
            [ HH.text "Text on user-defined light background" ]
        , textOnLightBackground
        , HH.legend [ Typography.subtitle1 ]
            [ HH.text "Text on user-defined dark background" ]
        , textOnDarkBackground
        ]
    }

themeColorsAsText :: HH.HTML w i
themeColorsAsText =
    HH.div demoThemeColorGroup
        [ HH.div (Theme.primary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Primary" ] ]
        , HH.div (Theme.secondary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Secondary" ] ]
        ]

themeColorsAsBackground :: HH.HTML w i
themeColorsAsBackground =
    HH.div demoThemeColorGroup
        [ HH.div
            (Theme.primaryBg :: Theme.onPrimary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Primary" ] ]
        , HH.div
            (Theme.secondaryBg :: Theme.onSecondary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Secondary" ] ]
        , HH.div
            (Theme.background :: Theme.textPrimaryOnBackground :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Background" ] ]
        ]

textOnBackground :: HH.HTML w i
textOnBackground =
    HH.div demoThemeColorGroup
        [ HH.div (Theme.background :: demoThemeTextRow)
            [ HH.span (Theme.textPrimaryOnBackground :: demoThemeTextStyle)
                [ HH.text "Primary" ]
            , HH.span (Theme.textSecondaryOnBackground :: demoThemeTextStyle)
                [ HH.text "Secondary" ]
            , HH.span (Theme.textHintOnBackground :: demoThemeTextStyle)
                [ HH.text "Hint" ]
            , HH.span (Theme.textDisabledOnBackground :: demoThemeTextStyle)
                [ HH.text "Disabled" ]
            , HH.span (Theme.textIconOnBackground :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnPrimary :: HH.HTML w i
textOnPrimary =
    HH.div demoThemeColorGroup
        [ HH.div (Theme.primaryBg :: demoThemeTextRow)
            [ HH.span (Theme.onPrimary :: demoThemeTextStyle)
                [ HH.text "Text" ]
            , HH.span (Theme.onPrimary :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnSecondary :: HH.HTML w i
textOnSecondary =
    HH.div demoThemeColorGroup
        [ HH.div (Theme.secondaryBg :: demoThemeTextRow)
            [ HH.span (Theme.onSecondary :: demoThemeTextStyle)
                [ HH.text "Text" ]
            , HH.span (Theme.onSecondary :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnLightBackground :: HH.HTML w i
textOnLightBackground =
    HH.div demoThemeColorGroup
        [ HH.div (demoThemeBgCustomLight <> demoThemeTextRow)
            [ HH.span (Theme.textPrimaryOnLight :: demoThemeTextStyle)
                [ HH.text "Primary" ]
            , HH.span (Theme.textSecondaryOnLight :: demoThemeTextStyle)
                [ HH.text "Secondary" ]
            , HH.span (Theme.textHintOnLight :: demoThemeTextStyle)
                [ HH.text "Hint" ]
            , HH.span (Theme.textDisabledOnLight :: demoThemeTextStyle)
                [ HH.text "Disabled" ]
            , HH.span (Theme.textIconOnLight :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnDarkBackground :: HH.HTML w i
textOnDarkBackground =
    HH.div demoThemeColorGroup
        [ HH.div (demoThemeBgCustomDark <> demoThemeTextRow)
            [ HH.span (Theme.textPrimaryOnDark :: demoThemeTextStyle)
                [ HH.text "Primary" ]
            , HH.span (Theme.textSecondaryOnDark :: demoThemeTextStyle)
                [ HH.text "Secondary" ]
            , HH.span (Theme.textHintOnDark :: demoThemeTextStyle)
                [ HH.text "Hint" ]
            , HH.span (Theme.textDisabledOnDark :: demoThemeTextStyle)
                [ HH.text "Disabled" ]
            , HH.span (Theme.textIconOnDark :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

heroMargin :: Array (HH.Attribute w i)
heroMargin =
    [ HP.style "margin: 16px 32px" ]

demoThemeColorGroup :: Array (HH.Attribute w i)
demoThemeColorGroup =
    [ HP.style "padding: 16px 0" ]

demoThemeColorSwatches :: Array (HH.Attribute w i)
demoThemeColorSwatches =
    [ HP.style "display: -ms-inline-flexbox; display: inline-flex; -ms-flex-direction: column; flex-direction: column; margin-right: 16px"
    , Elevation.z2
    ]

demoThemeColorSwatch :: Array (HH.Attribute w i)
demoThemeColorSwatch =
    [ HP.style "display: inline-block; -webkit-box-sizing: border-box; box-sizing: border-box; width: 150px; height: 50px; line-height: 50px; text-align: center; margin-bottom: 8px; border-radius: 4px"
    ]

demoThemeTextRow :: Array (HH.Attribute w i)
demoThemeTextRow =
    [ HP.style "display: -ms-inline-flexbox; display: inline-flex; -webkit-box-sizing: border-box; box-sizing: border-box; padding: 16px; border: 1px solid #f0f0f0; -ms-flex-align: center; align-items: center; -ms-flex-direction: row; flex-direction: row"
    ]

demoThemeTextStyle :: Array (HH.Attribute w i)
demoThemeTextStyle =
    [ HP.style "padding: 0 16px" ]

demoThemeIconStyle :: Array (HH.Attribute w i)
demoThemeIconStyle =
    HP.class_ material_icons :: demoThemeTextStyle

demoThemeBgCustomLight :: Array (HH.Attribute w i)
demoThemeBgCustomLight =
    [ HP.style "background-color: #ddd" ]

demoThemeBgCustomDark :: Array (HH.Attribute w i)
demoThemeBgCustomDark =
    [ HP.style "background-color: #d1d1d1" ]
