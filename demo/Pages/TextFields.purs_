module Demo.Pages.TextFields

import Browser.Dom
import Demo.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.HelperText as HelperText
import HalogenMWC.TextArea as TextArea
import HalogenMWC.TextField as TextField
import HalogenMWC.Typography as Typography
import Task

data Model =
    { value :: String }

defaultModel :: Model
defaultModel =
    { value = "" }

data Msg
    = Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title = "Text Field"
    , prelude = "Text fields allow users to input, edit, and select text. Text fields typically reside in forms but can appear in other places, like dialog boxes and search."
    , resources =
        { materialDesignGuidelines = Just "https://material.io/go/design-text-fields"
        , documentation = Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-TextField"
        , sourceCode = Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-textfield"
        }
    , hero = [ heroTextFields model ]
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Filled" ]
        , filledTextFields model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Shaped Filled" ]
        , shapedFilledTextFields model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Outlined" ]
        , outlinedTextFields model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Shaped Outlined (TODO)" ]
        , shapedOutlinedTextFields model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Text Fields without Label" ]
        , textFieldsWithoutLabel model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Text Fields with Character Counter" ]
        , textFieldsWithCharacterCounter model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Textarea" ]
        , textareaTextField model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Full Width" ]
        , fullwidthTextField model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Full Width Textarea" ]
        , fullwidthTextareaTextField model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Text Field" ]
        , focusTextField
        ]
    }

heroTextFields :: Model -> Html Msg
heroTextFields model =
    HH.div heroTextFieldContainer
        [ HH.div textFieldContainerHero
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                )
            ]
        , HH.div textFieldContainerHero
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                )
            ]
        ]

filledTextFields :: Model -> Html msg
filledTextFields model =
    HH.div textFieldRow
        [ HH.div textFieldContainer
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setLeadingIcon (Just (TextField.icon [] "event"))
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setTrailingIcon (Just (TextField.icon [] "delete"))
                )
            , demoHelperText
            ]
        ]

shapedFilledTextFields :: Model -> Html msg
shapedFilledTextFields model =
    HH.div textFieldRow
        [ HH.div textFieldContainer
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setAttributes [ style "border-radius" "16px 16px 0 0" ]
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setLeadingIcon (Just (TextField.icon [] "event"))
                    # TextField.setAttributes [ style "border-radius" "16px 16px 0 0" ]
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.filled
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setTrailingIcon (Just (TextField.icon [] "delete"))
                    # TextField.setAttributes [ style "border-radius" "16px 16px 0 0" ]
                )
            , demoHelperText
            ]
        ]

outlinedTextFields :: Model -> Html msg
outlinedTextFields model =
    HH.div textFieldRow
        [ HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setLeadingIcon (Just (TextField.icon [] "event"))
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setTrailingIcon (Just (TextField.icon [] "delete"))
                )
            , demoHelperText
            ]
        ]

shapedOutlinedTextFields :: Model -> Html msg
shapedOutlinedTextFields model =
    HH.div textFieldRow
        [ HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setLeadingIcon (Just (TextField.icon [] "event"))
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLabel (Just "Standard")
                    # TextField.setTrailingIcon (Just (TextField.icon [] "delete"))
                )
            , demoHelperText
            ]
        ]

textFieldsWithoutLabel :: Model -> Html msg
textFieldsWithoutLabel model =
    HH.div textFieldRow
        [ HH.div textFieldContainer
            [ TextField.outlined TextField.defaultConfig
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLeadingIcon (Just (TextField.icon [] "event"))
                )
            , demoHelperText
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setTrailingIcon (Just (TextField.icon [] "delete"))
                )
            , demoHelperText
            ]
        ]

textFieldsWithCharacterCounter :: Model -> Html msg
textFieldsWithCharacterCounter model =
    HH.div textFieldRow
        [ HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig # TextField.setMaxLength (Just 18))
            , demoHelperTextWithCharacterCounter
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setLeadingIcon (Just (TextField.icon [] "event"))
                    # TextField.setMaxLength (Just 18)
                )
            , demoHelperTextWithCharacterCounter
            ]
        , HH.div textFieldContainer
            [ TextField.outlined
                (TextField.defaultConfig
                    # TextField.setTrailingIcon (Just (TextField.icon [] "delete"))
                    # TextField.setMaxLength (Just 18)
                )
            , demoHelperTextWithCharacterCounter
            ]
        ]

textareaTextField :: Model -> Html msg
textareaTextField model =
    HH.div textFieldContainer
        [ TextArea.outlined
            (TextArea.defaultConfig # TextArea.setLabel (Just "Standard"))
        , demoHelperText
        ]

fullwidthTextField :: Model -> Html msg
fullwidthTextField model =
    HH.div textFieldContainer
        [ TextField.filled
            (TextField.defaultConfig
                # TextField.setPlaceholder (Just "Standard")
                # TextField.setFullwidth true
            )
        , demoHelperText
        ]

fullwidthTextareaTextField :: Model -> Html msg
fullwidthTextareaTextField model =
    HH.div textFieldRowFullwidth
        [ HH.div textFieldContainer
            [ TextArea.outlined
                (TextArea.defaultConfig
                    # TextArea.setLabel (Just "Standard")
                    # TextArea.setFullwidth true
                )
            , demoHelperText
            ]
        ]

focusTextField :: Html Msg
focusTextField =
    HH.div []
        [ TextField.filled
            (TextField.defaultConfig
                # TextField.setAttributes [ HP.id "my-text-field" ]
            )
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig # Button.setOnClick (Focus "my-text-field"))
            "Focus"
        ]

heroTextFieldContainer :: Array (HH.Attribute msg)
heroTextFieldContainer =
    [ HP.class_ hero_text_field_container
    , style "display" "-ms-flexbox"
    , style "display" "flex"
    , style "-ms-flex" "1 1 100%"
    , style "flex" "1 1 100%"
    , style "-ms-flex-pack" "distribute"
    , style "justify-content" "space-around"
    , style "-ms-flex-wrap" "wrap"
    , style "flex-wrap" "wrap"
    ]

textFieldContainerHero :: Array (HH.Attribute msg)
textFieldContainerHero =
    style "padding" "20px" :: textFieldContainer

textFieldContainer :: Array (HH.Attribute msg)
textFieldContainer =
    [ HP.class_ text_field_container
    , style "min-width" "200px"
    ]

textFieldRow :: Array (HH.Attribute msg)
textFieldRow =
    [ HP.class_ text_field_row
    , style "display" "flex"
    , style "align-items" "flex-start"
    , style "justify-content" "space-between"
    , style "flex-wrap" "wrap"
    ]

textFieldRowFullwidth :: Array (HH.Attribute msg)
textFieldRowFullwidth =
    [ HP.class_ "text-field-row text-field-row--fullwidth"
    , style "display" "block"
    ]

demoHelperText :: Html msg
demoHelperText =
    HelperText.helperLine []
        [ HelperText.helperText
            (HelperText.defaultConfig # HelperText.setPersistent true)
            "Helper Text"
        ]

demoHelperTextWithCharacterCounter :: Html msg
demoHelperTextWithCharacterCounter =
    HelperText.helperLine []
        [ HelperText.helperText
            (HelperText.defaultConfig # HelperText.setPersistent true)
            "Helper Text"
        , HelperText.characterCounter []
        ]
