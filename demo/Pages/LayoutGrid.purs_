module Demo.Pages.LayoutGrid where
    ( Model
    , Msg(..)
    , defaultModel
    , update
    , view
    )

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.LayoutGrid as LayoutGrid
import HalogenMWC.Typography as Typography

data Model =
    {}

defaultModel :: Model
defaultModel =
    {}

data Msg
    = NoOp

update :: Msg -> Model -> Model
update w i model =
    model

view :: Model -> CatalogPage Msg
view model =
    { title: "Layout Grid"
    , prelude: "Material designâ€™s responsive UI is based on a 12-column grid layout."
    , resources =
        { materialDesignGuidelines: Nothing
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-LayoutGrid"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-layout-grid"
        }
    , hero: heroGrid
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Columns" ]
        , columnsGrid
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Grid Left Alignment" ]
        , HH.p
            [ Typography.body1 ]
            [ HH.text "This requires a max-width on the top-level grid element." ]
        , leftAlignedGrid
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Grid Right Alignment" ]
        , HH.p
            [ Typography.body1 ]
            [ HH.text "This requires a max-width on the top-level grid element." ]
        , rightAlignedGrid
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Cell Alignment" ]
        , HH.p
            [ Typography.body1 ]
            [ HH.text "Cell alignment requires a cell height smaller than the inner height of the grid." ]
        , cellAlignmentGrid
        ]
    }

demoGrid :: Array (HH.Attribute w i) -> Array (HH.HTML w i) -> HH.HTML w i
demoGrid options =
    LayoutGrid.layoutGrid
        (style "background" "rgba(0,0,0,.2)"
            :: style "min-width" "360px"
            :: options
        )

demoCell :: Array (HH.Attribute w i) -> HH.HTML w i
demoCell options =
    LayoutGrid.cell
        (style "background" "rgba(0,0,0,.2)"
            :: style "height" "100px"
            :: options
        )
        []

heroGrid :: Array (HH.HTML w i)
heroGrid =
    [ demoGrid [] [ LayoutGrid.inner [] (List.repeat 3 (demoCell [])) ] ]

columnsGrid :: HH.HTML w i
columnsGrid =
    demoGrid []
        [ LayoutGrid.inner []
            [ demoCell [ LayoutGrid.span6 ]
            , demoCell [ LayoutGrid.span3 ]
            , demoCell [ LayoutGrid.span2 ]
            , demoCell [ LayoutGrid.span1 ]
            , demoCell [ LayoutGrid.span3 ]
            , demoCell [ LayoutGrid.span1 ]
            , demoCell [ LayoutGrid.span8 ]
            ]
        ]

leftAlignedGrid :: HH.HTML w i
leftAlignedGrid =
    demoGrid
        [ LayoutGrid.alignLeft
        , style "max-width" "800px"
        ]
        [ LayoutGrid.inner []
            [ demoCell []
            , demoCell []
            , demoCell []
            ]
        ]

rightAlignedGrid :: HH.HTML w i
rightAlignedGrid =
    demoGrid
        [ LayoutGrid.alignRight
        , style "max-width" "800px"
        ]
        [ LayoutGrid.inner [] (List.repeat 3 (demoCell []))
        ]

cellAlignmentGrid :: HH.HTML w i
cellAlignmentGrid =
    let
        innerHeight =
            [ style "min-height" "200px" ]

        cellHeight =
            style "max-height" "50px"
    in
    demoGrid
        [ style "min-height" "200px"
        ]
        [ LayoutGrid.inner innerHeight
            [ demoCell [ LayoutGrid.alignTop, cellHeight ]
            , demoCell [ LayoutGrid.alignMiddle, cellHeight ]
            , demoCell [ LayoutGrid.alignBottom, cellHeight ]
            ]
        ]
