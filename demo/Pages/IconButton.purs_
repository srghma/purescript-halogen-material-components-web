module Demo.Pages.IconButton where

import Browser.Dom
import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.IconButton as IconButton
import HalogenMWC.IconToggle as IconToggle
import HalogenMWC.Typography as Typography
import Set
import Task

data Model =
    { ons :: Set String }

defaultModel :: Model
defaultModel =
    { ons: Set.empty }

data Msg
    = Toggle String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        Toggle id ->
            ( { model
                | ons =
                    if Set.member id model.ons then
                        Set.remove id model.ons

                    else
                        Set.insert id model.ons
              }
            , Cmd.none
            )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title: "Icon Button"
    , prelude: "Icons are appropriate for buttons that allow a user to take actions or make a selection, such as adding or removing a star to an item."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/design/components/buttons.html#toggle-button"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-IconButton"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-icon-button"
        }
    , hero =
        [ IconToggle.iconToggle
            (IconToggle.defaultConfig
                # IconToggle.setOn (Set.member "icon-button-hero" model.ons)
                # IconToggle.setOnChange (Toggle "icon-button-hero")
            )
            { offIcon: "favorite_border"
            , onIcon: "favorite"
            }
        ]
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Icon Button" ]
        , IconButton.iconButton IconButton.defaultConfig "wifi"
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Icon Toggle" ]
        , IconToggle.iconToggle
            (IconToggle.defaultConfig
                # IconToggle.setOn (Set.member "icon-button-toggle" model.ons)
                # IconToggle.setOnChange (Toggle "icon-button-toggle")
            )
            { offIcon: "favorite_border"
            , onIcon: "favorite"
            }
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Icon Button" ]
        , HH.div []
            [ IconButton.iconButton
                (IconButton.defaultConfig
                    # IconButton.setAttributes [ HP.id "my-icon-button" ]
                )
                "wifi"
            , HH.text "\u{00A0}"
            , Button.raised
                (Button.defaultConfig # Button.setOnClick (Focus "my-icon-button"))
                "Focus"
            ]
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Icon Toggle" ]
        , HH.div []
            [ IconToggle.iconToggle
                (IconToggle.defaultConfig
                    # IconToggle.setOn (Set.member "icon-button-toggle" model.ons)
                    # IconToggle.setOnChange (Toggle "icon-button-toggle")
                    # IconToggle.setAttributes [ HP.id "my-icon-toggle" ]
                )
                { offIcon: "favorite_border"
                , onIcon: "favorite"
                }
            , HH.text "\u{00A0}"
            , Button.raised
                (Button.defaultConfig # Button.setOnClick (Focus "my-icon-toggle"))
                "Focus"
            ]
        ]
    }
