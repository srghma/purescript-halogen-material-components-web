module Demo.Pages.DataTable where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.DataTable as DataTable
import Material.Classes.Typography
import Set

data Model =
    { selected :: Set String }

defaultModel :: Model
defaultModel =
    { selected: Set.empty }

data Msg
    = NoOp
    | ItemSelected String
    | AllSelected
    | AllUnselected

update :: Msg -> Model -> Model
update w i model =
    case w i of
        NoOp ->
            model

        ItemSelected key ->
            { model
                | selected =
                    if Set.member key model.selected then
                        Set.remove key model.selected

                    else
                        Set.insert key model.selected
            }

        AllSelected ->
            { model
                | selected =
                    Set.fromList
                        [ "Frozen yogurt", "Ice cream sandwich", "Eclair" ]
            }

        AllUnselected ->
            { model | selected = Set.empty }

view :: Model -> CatalogPage Msg
view model =
    { title: "Data Table"
    , prelude: "Data tables display information in a way thatâ€™s easy to scan, so that users can look for patterns and insights."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-data-tables"
        , documentation: Just "https://material.io/components/web/catalog/data-tables/"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-data-table"
        }
    , hero: heroDataTable
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Data Table Standard" ]
        , standardDataTable
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Data Table with Row Selection" ]
        , dataTableWithRowSelection model
        ]
    }

heroDataTable :: Array (HH.HTML w i)
heroDataTable =
    [ standardDataTable ]

label :: { desert :: String, carbs :: String, protein :: String, comments :: String }
label =
    { desert: "Desert"
    , carbs: "Carbs (g)"
    , protein: "Protein (g)"
    , comments: "Comments"
    }

data :: Array { desert :: String, carbs :: String, protein :: String, comments :: String }
data =
    [ { desert: "Frozen yogurt"
      , carbs: "24"
      , protein: "4.0"
      , comments: "Super tasty"
      }
    , { desert: "Ice cream sandwich"
      , carbs: "37"
      , protein: "4.33333333333"
      , comments: "I like ice cream more"
      }
    , { desert: "Eclair"
      , carbs: "24"
      , protein: "6.0"
      , comments: "New filing flavor"
      }
    ]

standardDataTable :: HH.HTML w i
standardDataTable =
    let
        row { desert, carbs, protein, comments } =
            DataTable.row []
                [ DataTable.cell [] [ HH.text desert ]
                , DataTable.numericCell [] [ HH.text carbs ]
                , DataTable.numericCell [] [ HH.text protein ]
                , DataTable.cell [] [ HH.text comments ]
                ]
    in
    DataTable.dataTable DataTable.defaultConfig
        { thead: [ row label ]
        , tbody: map row data
        }

dataTableWithRowSelection :: Model -> HH.HTML Msg
dataTableWithRowSelection model =
    let
        allSelected =
            Set.size model.selected == 3

        allUnselected =
            Set.size model.selected == 0

        headerRow { onChange, state } { desert, carbs, protein, comments } =
            [ DataTable.row []
                [ DataTable.checkboxCell []
                    (Checkbox.defaultConfig
                        # Checkbox.setState (Just state)
                        # Checkbox.setOnChange onChange
                    )
                , DataTable.cell [] [ HH.text desert ]
                , DataTable.numericCell [] [ HH.text carbs ]
                , DataTable.numericCell [] [ HH.text protein ]
                , DataTable.cell [] [ HH.text comments ]
                ]
            ]

        row { onChange, selected } { desert, carbs, protein, comments } =
            DataTable.row
                (if selected then
                    DataTable.selected

                 else
                    []
                )
                [ DataTable.checkboxCell []
                    (Checkbox.defaultConfig
                        # Checkbox.setState
                            (Just
                                (if selected then
                                    Checkbox.checked

                                 else
                                    Checkbox.unchecked
                                )
                            )
                        # Checkbox.setOnChange onChange
                    )
                , DataTable.cell [] [ HH.text desert ]
                , DataTable.numericCell [] [ HH.text carbs ]
                , DataTable.numericCell [] [ HH.text protein ]
                , DataTable.cell [] [ HH.text comments ]
                ]
    in
    DataTable.dataTable DataTable.defaultConfig
        { thead =
            headerRow
                { onChange =
                    if allSelected then
                        AllUnselected

                    else
                        AllSelected
                , state =
                    if allSelected then
                        Checkbox.checked

                    else if allUnselected then
                        Checkbox.unchecked

                    else
                        Checkbox.indeterminate
                }
                label
        , tbody =
            map
                (\({ desert } as data_) ->
                    row
                        { onChange: ItemSelected desert
                        , selected: Set.member desert model.selected
                        }
                        data_
                )
                data
        }
