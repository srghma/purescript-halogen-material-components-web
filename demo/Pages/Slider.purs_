module Demo.Pages.Slider where

import Demo.HOC.CatalogPage
import Dict
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Slider as Slider
import Material.Classes.Typography

data State =
    { sliders :: Dict String Float }

initialState :: forall r w i . State
initialState =
    { sliders =
        Dict.fromList
            [ ( "hero-slider", 25 )
            , ( "continuous-slider", 25 )
            , ( "discrete-slider", 25 )
            , ( "discrete-slider-with-tick-marks", 25 )
            ]
    }

data Action
    = Changed String Float
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: forall r w i . Action -> State -> ( State, Cmd Action )
update w i model =
    case w i of
        Changed id value ->
            ( { model | sliders = Dict.insert id value model.sliders }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

render :: forall r w i . State -> CatalogPage Action
render model =
    { title: "Slider"
    , prelude: "Sliders let users select from a range of values by moving the slider thumb."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-sliders"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Slider"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider"
        }
    , hero: [ heroSlider model ]
    , content =
        [ HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Continuous" ]
        , continuousSlider model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Discrete" ]
        , discreteSlider model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Discrete with Tick Marks" ]
        , discreteSliderWithTickMarks model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Focus Slider" ]
        , focusSlider model
        ]
    }

heroSlider :: forall r w i . State -> HH.HTML Action
heroSlider model =
    let
        id =
            "hero-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Dict.get id model.sliders)
            , onInput = (Changed id)
        )

continuousSlider :: forall r w i . State -> HH.HTML Action
continuousSlider model =
    let
        id =
            "continuous-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Dict.get id model.sliders)
            , onInput = (Changed id)
            , min = (Just 0)
            , max = (Just 50)
        )

discreteSlider :: forall r w i . State -> HH.HTML Action
discreteSlider model =
    let
        id =
            "discrete-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Dict.get id model.sliders)
            , onInput = (Changed id)
            , discrete = true
            , min = (Just 0)
            , max = (Just 50)
            , step = (Just 1)
        )

discreteSliderWithTickMarks :: forall r w i . State -> HH.HTML Action
discreteSliderWithTickMarks model =
    let
        id =
            "discrete-slider-with-tick-marks"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Dict.get id model.sliders)
            , onInput = (Changed id)
            , discrete = true
            , min = (Just 0)
            , max = (Just 50)
            , step = (Just 1)
            , displayMarkers = true
        )

focusSlider :: forall r w i . State -> HH.HTML Action
focusSlider model =
    let
        id =
            "my-slider"
    in
    HH.div []
        [ Slider.slider
            (Slider.defaultConfig
                { value = (Dict.get id model.sliders)
                , onInput = (Changed id)
                , additionalAttributes = [ HP.id_ id ]
            )
        , HH.text "\x00A0"
        , Button.button Button.Raised
            (Button.defaultConfig { onClick = (Focus id))
            "Focus"
        ]
