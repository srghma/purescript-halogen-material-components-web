module Demo.Pages.Slider

import Browser.Dom
import Demo.CatalogPage
import Dict
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Slider as Slider
import HalogenMWC.Typography as Typography
import Task

data Model =
    { sliders :: Dict String Float }

defaultModel :: Model
defaultModel =
    { sliders =
        Dict.fromList
            [ ( "hero-slider", 25 )
            , ( "continuous-slider", 25 )
            , ( "discrete-slider", 25 )
            , ( "discrete-slider-with-tick-marks", 25 )
            ]
    }

data Msg
    = Changed String Float
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Changed id value ->
            ( { model | sliders = Dict.insert id value model.sliders }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title = "Slider"
    , prelude = "Sliders let users select from a range of values by moving the slider thumb."
    , resources =
        { materialDesignGuidelines = Just "https://material.io/go/design-sliders"
        , documentation = Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Slider"
        , sourceCode = Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider"
        }
    , hero = [ heroSlider model ]
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Continuous" ]
        , continuousSlider model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Discrete" ]
        , discreteSlider model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Discrete with Tick Marks" ]
        , discreteSliderWithTickMarks model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Slider" ]
        , focusSlider model
        ]
    }

heroSlider :: Model -> Html Msg
heroSlider model =
    let
        id =
            "hero-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            # Slider.setValue (Dict.get id model.sliders)
            # Slider.setOnInput (Changed id)
        )

continuousSlider :: Model -> Html Msg
continuousSlider model =
    let
        id =
            "continuous-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            # Slider.setValue (Dict.get id model.sliders)
            # Slider.setOnInput (Changed id)
            # Slider.setMin (Just 0)
            # Slider.setMax (Just 50)
        )

discreteSlider :: Model -> Html Msg
discreteSlider model =
    let
        id =
            "discrete-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            # Slider.setValue (Dict.get id model.sliders)
            # Slider.setOnInput (Changed id)
            # Slider.setDiscrete true
            # Slider.setMin (Just 0)
            # Slider.setMax (Just 50)
            # Slider.setStep (Just 1)
        )

discreteSliderWithTickMarks :: Model -> Html Msg
discreteSliderWithTickMarks model =
    let
        id =
            "discrete-slider-with-tick-marks"
    in
    Slider.slider
        (Slider.defaultConfig
            # Slider.setValue (Dict.get id model.sliders)
            # Slider.setOnInput (Changed id)
            # Slider.setDiscrete true
            # Slider.setMin (Just 0)
            # Slider.setMax (Just 50)
            # Slider.setStep (Just 1)
            # Slider.setDisplayMarkers true
        )

focusSlider :: Model -> Html Msg
focusSlider model =
    let
        id =
            "my-slider"
    in
    HH.div []
        [ Slider.slider
            (Slider.defaultConfig
                # Slider.setValue (Dict.get id model.sliders)
                # Slider.setOnInput (Changed id)
                # Slider.setAttributes [ HP.id id ]
            )
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig # Button.setOnClick (Focus id))
            "Focus"
        ]
