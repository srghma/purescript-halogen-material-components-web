module Demo.Pages.RadioButtons

import Browser.Dom
import Demo.HOC.CatalogPage
import Dict
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.FormField as FormField
import HalogenMWC.Radio as Radio
import HalogenMWC.Typography as Typography
import Task

data Model =
    { radios :: Dict String String }

defaultModel :: Model
defaultModel =
    { radios =
        Dict.fromList
            [ ( "hero", "radio-buttons-hero-radio-1" )
            , ( "example", "radio-buttons-example-radio-1" )
            ]
    }

data Msg
    = Set String String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Set group index ->
            ( { model | radios = Dict.insert group index model.radios }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

isSelected :: String -> String -> Model -> Boolean
isSelected group index model =
    Dict.get group model.radios
        # map ((==) index)
        # Maybe.fromMaybe false

view :: Model -> CatalogPage Msg
view model =
    { title = "Radio Button"
    , prelude = "Buttons communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars."
    , resources =
        { materialDesignGuidelines = Just "https://material.io/go/design-radio-buttons"
        , documentation = Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Radio"
        , sourceCode = Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio"
        }
    , hero = [ heroRadioGroup model ]
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Radio Buttons" ]
        , exampleRadioGroup model
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Radio Button" ]
        , focusRadio
        ]
    }

heroRadio :: Model -> String -> String -> Html Msg
heroRadio model group index =
    Radio.radio
        (Radio.defaultConfig
            # Radio.setChecked (isSelected group index model)
            # Radio.setOnChange (Set group index)
            # Radio.setAttributes [ style "margin" "0 10px" ]
        )

heroRadioGroup :: Model -> Html Msg
heroRadioGroup model =
    HH.div []
        [ heroRadio model "hero" "radio-buttons-hero-radio-1"
        , heroRadio model "hero" "radio-buttons-hero-radio-2"
        ]

radio :: Model -> String -> String -> String -> Html Msg
radio model group index label =
    FormField.formField
        (FormField.defaultConfig
            # FormField.setLabel (Just label)
            # FormField.setFor (Just index)
            # FormField.setOnClick (Set group index)
            # FormField.setAttributes [ style "margin" "0 10px" ]
        )
        [ Radio.radio
            (Radio.defaultConfig
                # Radio.setChecked (isSelected group index model)
                # Radio.setOnChange (Set group index)
            )
        ]

exampleRadioGroup :: Model -> Html Msg
exampleRadioGroup model =
    HH.div []
        [ radio model "example" "radio-buttons-example-radio-1" "Radio 1"
        , radio model "example" "radio-buttons-example-radio-2" "Radio 2"
        ]

focusRadio :: Html Msg
focusRadio =
    HH.div []
        [ Radio.radio
            (Radio.defaultConfig # Radio.setAttributes [ HP.id "my-radio" ])
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig # Button.setOnClick (Focus "my-radio"))
            "Focus"
        ]
