module Demo.Pages.Fabs where

import Browser.Dom
import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Fab as Fab
import HalogenMWC.Fab.Extended as ExtendedFab
import HalogenMWC.Typography as Typography
import Task

data Model =
    {}

defaultModel :: Model
defaultModel =
    {}

data Msg
    = Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title: "Floating Action Button"
    , prelude: "Floating action buttons represents the primary action in an application. Only one floating action button is recommended per screen to represent the most common action."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-fab"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Fab"
        , sourceCode: Just "https://github.com/material-components/material-components-web/blob/master/packages/mdc-fab/"
        }
    , hero: [ Fab.fab Fab.defaultConfig "favorite_border" ]
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Standard Floating Action Button" ]
        , Fab.fab Fab.defaultConfig "favorite_border"
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Mini Floating Action Button" ]
        , Fab.fab (Fab.defaultConfig # Fab.setMini true) "favorite_border"
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Extended FAB" ]
        , ExtendedFab.fab (ExtendedFab.defaultConfig # ExtendedFab.setIcon (Just "add"))
            "Create"
        , HH.h3 [ Typography.subtitle1 ]
            [ HH.text "Extended FAB (Text label followed by icon)" ]
        , ExtendedFab.fab
            (ExtendedFab.defaultConfig
                # ExtendedFab.setIcon (Just "add")
                # ExtendedFab.setTrailingIcon true
            )
            "Create"
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Extended FAB (without icon)" ]
        , ExtendedFab.fab ExtendedFab.defaultConfig "Create"
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "FAB (Shaped)" ]
        , HH.div [ style "display" "flex" ]
            [ Fab.fab
                (Fab.defaultConfig
                    # Fab.setAttributes
                        [ style "border-radius" "50% 0"
                        , style "margin-right" "24px"
                        ]
                )
                "favorite_border"
            , Fab.fab
                (Fab.defaultConfig
                    # Fab.setMini true
                    # Fab.setAttributes
                        [ style "border-radius" "8px"
                        , style "margin-right" "24px"
                        ]
                )
                "favorite_border"
            , ExtendedFab.fab (ExtendedFab.defaultConfig # ExtendedFab.setIcon (Just "add"))
                "Create"
            ]
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus FAB" ]
        , HH.div [ style "display" "flex" ]
            [ Fab.fab
                (Fab.defaultConfig # Fab.setAttributes [ HP.id "my-fab" ])
                "favorite_border"
            , HH.text "\u{00A0}"
            , Button.raised
                (Button.defaultConfig # Button.setOnClick (Focus "my-fab"))
                "Focus"
            ]
        ]
    }
