module Demo.Pages.Selects where

import Browser.Dom
import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Select as Select
import HalogenMWC.Select.Item as SelectItem
import Material.Classes.Typography
import Task

data Model =
    { hero :: Maybe Fruit
    , filled :: Maybe Fruit
    , outlined :: Maybe Fruit
    , filledWithIcon :: Maybe Fruit
    , outlinedWithIcon :: Maybe Fruit
    , focused :: Maybe Fruit
    }

defaultModel :: Model
defaultModel =
    { hero: Nothing
    , filled: Nothing
    , outlined: Nothing
    , filledWithIcon: Nothing
    , outlinedWithIcon: Nothing
    , focused: Nothing
    }

data Fruit
    = Apple
    | Orange
    | Banana

data Msg
    = HeroChanged (Maybe Fruit)
    | FilledChanged (Maybe Fruit)
    | OutlinedChanged (Maybe Fruit)
    | FilledWithIconChanged (Maybe Fruit)
    | OutlinedWithIconChanged (Maybe Fruit)
    | FocusedChanged (Maybe Fruit)
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        HeroChanged hero ->
            ( { model | hero = hero }, Cmd.none )

        FilledChanged filled ->
            ( { model | filled = filled }, Cmd.none )

        OutlinedChanged outlined ->
            ( { model | outlined = outlined }, Cmd.none )

        FilledWithIconChanged filledWithIcon ->
            ( { model | filledWithIcon = filledWithIcon }, Cmd.none )

        OutlinedWithIconChanged outlinedWithIcon ->
            ( { model | outlinedWithIcon = outlinedWithIcon }, Cmd.none )

        FocusedChanged focused ->
            ( { model | focused = focused }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title: "Select"
    , prelude: "Selects allow users to select from a single-option menu."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-text-fields"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Select"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-select"
        }
    , hero: [ heroSelect model ]
    , content =
        [ HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Filled" ]
        , filledSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Outlined" ]
        , outlinedSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Filled with Icon" ]
        , filledWithIconSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Outlined with Icon" ]
        , outlinedWithIconSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Focus Select" ]
        , focusSelect model
        ]
    }

heroSelect :: Model -> HH.HTML Msg
heroSelect model =
    Select.filled
        (Select.defaultConfig
            # Select.setLabel (Just "Fruit")
            # Select.setSelected (Just model.hero)
            # Select.setOnChange HeroChanged
        )
        firstItem
        remainingItems

firstItem :: SelectItem (Maybe a) w i
firstItem =
    SelectItem.selectItem
        (SelectItem.defaultConfig { value: Nothing })
        [ HH.text "" ]

remainingItems :: Array (SelectItem (Maybe Fruit) w i)
remainingItems =
    [ SelectItem.selectItem
        (SelectItem.defaultConfig { value: Just Apple })
        [ HH.text "Apple" ]
    , SelectItem.selectItem
        (SelectItem.defaultConfig { value: Just Orange })
        [ HH.text "Orange" ]
    , SelectItem.selectItem
        (SelectItem.defaultConfig { value: Just Banana })
        [ HH.text "Banana" ]
    ]

filledSelect :: Model -> HH.HTML Msg
filledSelect model =
    Select.filled
        (Select.defaultConfig
            # Select.setLabel (Just "Fruit")
            # Select.setSelected (Just model.filled)
            # Select.setOnChange FilledChanged
        )
        firstItem
        remainingItems

outlinedSelect :: Model -> HH.HTML Msg
outlinedSelect model =
    Select.outlined
        (Select.defaultConfig
            # Select.setLabel (Just "Fruit")
            # Select.setSelected (Just model.outlined)
            # Select.setOnChange OutlinedChanged
        )
        firstItem
        remainingItems

filledWithIconSelect :: Model -> HH.HTML Msg
filledWithIconSelect model =
    Select.filled
        (Select.defaultConfig
            # Select.setLabel (Just "Fruit")
            # Select.setSelected (Just model.filledWithIcon)
            # Select.setLeadingIcon (Just (Select.icon [] "favorite"))
            # Select.setOnChange FilledWithIconChanged
        )
        firstItem
        remainingItems

outlinedWithIconSelect :: Model -> HH.HTML Msg
outlinedWithIconSelect model =
    Select.outlined
        (Select.defaultConfig
            # Select.setLabel (Just "Fruit")
            # Select.setSelected (Just model.outlinedWithIcon)
            # Select.setLeadingIcon (Just (Select.icon [] "favorite"))
            # Select.setOnChange OutlinedWithIconChanged
        )
        firstItem
        remainingItems

focusSelect :: Model -> HH.HTML Msg
focusSelect model =
    HH.div
        [ HP.style "display: flex; align-items: center"
        ]
        [ Select.filled
            (Select.defaultConfig
                # Select.setSelected (Just model.focused)
                # Select.setOnChange FocusedChanged
                # Select.setAttributes [ HP.id "my-select" ]
            )
            firstItem
            remainingItems
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig # Button.setOnClick (Focus "my-select"))
            "Focus"
        ]
