module Demo.Pages.Selects where

import Browser.Dom
import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Select as Select
import HalogenMWC.Select.Item as SelectItem
import Material.Classes.Typography
import Task

data Model =
    { hero :: Maybe Fruit
    , filled :: Maybe Fruit
    , outlined :: Maybe Fruit
    , filledWithIcon :: Maybe Fruit
    , outlinedWithIcon :: Maybe Fruit
    , focused :: Maybe Fruit
    }

defaultModel :: forall r w i . Model
defaultModel =
    { hero: Nothing
    , filled: Nothing
    , outlined: Nothing
    , filledWithIcon: Nothing
    , outlinedWithIcon: Nothing
    , focused: Nothing
    }

data Fruit
    = Apple
    | Orange
    | Banana

data Action
    = HeroChanged (Maybe Fruit)
    | FilledChanged (Maybe Fruit)
    | OutlinedChanged (Maybe Fruit)
    | FilledWithIconChanged (Maybe Fruit)
    | OutlinedWithIconChanged (Maybe Fruit)
    | FocusedChanged (Maybe Fruit)
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: forall r w i . Action -> Model -> ( Model, Cmd Action )
update w i model =
    case w i of
        HeroChanged hero ->
            ( { model | hero = hero }, Cmd.none )

        FilledChanged filled ->
            ( { model | filled = filled }, Cmd.none )

        OutlinedChanged outlined ->
            ( { model | outlined = outlined }, Cmd.none )

        FilledWithIconChanged filledWithIcon ->
            ( { model | filledWithIcon = filledWithIcon }, Cmd.none )

        OutlinedWithIconChanged outlinedWithIcon ->
            ( { model | outlinedWithIcon = outlinedWithIcon }, Cmd.none )

        FocusedChanged focused ->
            ( { model | focused = focused }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: forall r w i . Model -> CatalogPage Action
view model =
    { title: "Select"
    , prelude: "Selects allow users to select from a single-option menu."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-text-fields"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Select"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-select"
        }
    , hero: [ heroSelect model ]
    , content =
        [ HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Filled" ]
        , filledSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Outlined" ]
        , outlinedSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Filled with Icon" ]
        , filledWithIconSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Outlined with Icon" ]
        , outlinedWithIconSelect model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Focus Select" ]
        , focusSelect model
        ]
    }

heroSelect :: forall r w i . Model -> HH.HTML Action
heroSelect model =
    Select.filled
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just model.hero)
            , onChange = HeroChanged
        )
        firstItem
        remainingItems

firstItem :: forall r w i . SelectItem (Maybe a) w i
firstItem =
    SelectItem.selectItem
        (SelectItem.defaultConfig { value: Nothing })
        [ HH.text "" ]

remainingItems :: forall r w i . Array (SelectItem (Maybe Fruit) w i)
remainingItems =
    [ SelectItem.selectItem
        (SelectItem.defaultConfig { value: Just Apple })
        [ HH.text "Apple" ]
    , SelectItem.selectItem
        (SelectItem.defaultConfig { value: Just Orange })
        [ HH.text "Orange" ]
    , SelectItem.selectItem
        (SelectItem.defaultConfig { value: Just Banana })
        [ HH.text "Banana" ]
    ]

filledSelect :: forall r w i . Model -> HH.HTML Action
filledSelect model =
    Select.filled
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just model.filled)
            , onChange = FilledChanged
        )
        firstItem
        remainingItems

outlinedSelect :: forall r w i . Model -> HH.HTML Action
outlinedSelect model =
    Select.outlined
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just model.outlined)
            , onChange = OutlinedChanged
        )
        firstItem
        remainingItems

filledWithIconSelect :: forall r w i . Model -> HH.HTML Action
filledWithIconSelect model =
    Select.filled
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just model.filledWithIcon)
            , leadingIcon = (Just (Select.icon [] "favorite"))
            , onChange = FilledWithIconChanged
        )
        firstItem
        remainingItems

outlinedWithIconSelect :: forall r w i . Model -> HH.HTML Action
outlinedWithIconSelect model =
    Select.outlined
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just model.outlinedWithIcon)
            , leadingIcon = (Just (Select.icon [] "favorite"))
            , onChange = OutlinedWithIconChanged
        )
        firstItem
        remainingItems

focusSelect :: forall r w i . Model -> HH.HTML Action
focusSelect model =
    HH.div
        [ HP.style "display: flex; align-items: center;"
        ]
        [ Select.filled
            (Select.defaultConfig
                { selected = (Just model.focused)
                , onChange = FocusedChanged
                , additionalAttributes = [ HP.id "my-select" ]
            )
            firstItem
            remainingItems
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig { onClick = (Focus "my-select"))
            "Focus"
        ]
