module Demo.Pages.Checkbox where

import Demo.HOC.CatalogPage
import Dict
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Checkbox as Checkbox
import Material.Classes.Typography

data State =
    { checkboxes :: Dict String Checkbox.State }

initialState :: forall r w i . State
initialState =
    { checkboxes =
        Dict.fromList
            [ ( "checked-hero-checkbox", Checkbox.checked )
            , ( "unchecked-hero-checkbox", Checkbox.unchecked )
            , ( "unchecked-checkbox", Checkbox.unchecked )
            , ( "checked-checkbox", Checkbox.checked )
            ]
    }

data Action
    = Changed String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: forall r w i . Action -> State -> ( State, Cmd Action )
update w i model =
    case w i of
        Changed index ->
            let
                checkboxes =
                    Dict.update index
                        (\state ->
                            if state == Just Checkbox.checked then
                                Just Checkbox.unchecked

                            else
                                Just Checkbox.checked
                        )
                        model.checkboxes
            in
            ( { model | checkboxes = checkboxes }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: forall r w i . State -> CatalogPage Action
view model =
    { title: "Checkbox"
    , prelude: "Checkboxes allow the user to select multiple options from a set."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-checkboxes"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Checkbox"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-checkbox"
        }
    , hero: heroCheckboxes model
    , content =
        [ HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Unchecked" ]
        , checkbox "unchecked-checkbox" model []
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Indeterminate" ]
        , checkbox "indeterminate-checkbox" model []
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Checked" ]
        , checkbox "checked-checkbox" model []
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Focus Checkbox" ]
        , focusCheckbox
        ]
    }

heroCheckboxes :: forall r w i . State -> Array (HH.HTML Action)
heroCheckboxes model =
    [ checkbox "checked-hero-checkbox" model heroMargin
    , checkbox "unchecked-hero-checkbox" model heroMargin
    ]

checkbox :: forall r w i . String -> State -> Array (HH.Attribute Action) -> HH.HTML Action
checkbox index model attributes =
    let
        state =
            Dict.get index model.checkboxes
                # Maybe.fromMaybe Checkbox.indeterminate
    in
    Checkbox.checkbox
        (Checkbox.defaultConfig
            { state = (Just state)
            , onChange = (Changed index)
            , additionalAttributes = attributes
        )

focusCheckbox :: forall r w i . HH.HTML Action
focusCheckbox =
    HH.div []
        [ Checkbox.checkbox
            (Checkbox.defaultConfig
                { additionalAttributes = [ HP.id_ "my-checkbox" ]
            )
        , HH.text "\x00A0"
        , Button.raised (Button.defaultConfig { onClick = (Focus "my-checkbox"))
            "Focus"
        ]

heroMargin :: forall r w i . Array (IProp r i)
heroMargin =
    [ HP.style "margin: 8px 16px;" ]
