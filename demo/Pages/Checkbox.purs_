module Demo.Pages.Checkbox where

import Browser.Dom
import Demo.HOC.CatalogPage
import Dict
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Checkbox as Checkbox
import HalogenMWC.Typography as Typography
import Task

data Model =
    { checkboxes :: Dict String Checkbox.State }

defaultModel :: Model
defaultModel =
    { checkboxes =
        Dict.fromList
            [ ( "checked-hero-checkbox", Checkbox.checked )
            , ( "unchecked-hero-checkbox", Checkbox.unchecked )
            , ( "unchecked-checkbox", Checkbox.unchecked )
            , ( "checked-checkbox", Checkbox.checked )
            ]
    }

data Msg
    = Changed String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        Changed index ->
            let
                checkboxes =
                    Dict.update index
                        (\state ->
                            if state == Just Checkbox.checked then
                                Just Checkbox.unchecked

                            else
                                Just Checkbox.checked
                        )
                        model.checkboxes
            in
            ( { model | checkboxes = checkboxes }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title = "Checkbox"
    , prelude = "Checkboxes allow the user to select multiple options from a set."
    , resources =
        { materialDesignGuidelines = Just "https://material.io/go/design-checkboxes"
        , documentation = Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Checkbox"
        , sourceCode = Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-checkbox"
        }
    , hero = heroCheckboxes model
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Unchecked" ]
        , checkbox "unchecked-checkbox" model []
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Indeterminate" ]
        , checkbox "indeterminate-checkbox" model []
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Checked" ]
        , checkbox "checked-checkbox" model []
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Checkbox" ]
        , focusCheckbox
        ]
    }

heroCheckboxes :: Model -> Array (Html Msg)
heroCheckboxes model =
    [ checkbox "checked-hero-checkbox" model heroMargin
    , checkbox "unchecked-hero-checkbox" model heroMargin
    ]

checkbox :: String -> Model -> Array (HH.Attribute Msg) -> Html Msg
checkbox index model attributes =
    let
        state =
            Dict.get index model.checkboxes
                # Maybe.fromMaybe Checkbox.indeterminate
    in
    Checkbox.checkbox
        (Checkbox.defaultConfig
            # Checkbox.setState (Just state)
            # Checkbox.setOnChange (Changed index)
            # Checkbox.setAttributes attributes
        )

focusCheckbox :: Html Msg
focusCheckbox =
    HH.div []
        [ Checkbox.checkbox
            (Checkbox.defaultConfig
                # Checkbox.setAttributes [ HP.id "my-checkbox" ]
            )
        , HH.text "\u{00A0}"
        , Button.raised (Button.defaultConfig # Button.setOnClick (Focus "my-checkbox"))
            "Focus"
        ]

heroMargin :: Array (HH.Attribute w i)
heroMargin =
    [ style "margin" "8px 16px" ]
