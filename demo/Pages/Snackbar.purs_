module Demo.Pages.Snackbar where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Snackbar as Snackbar
import Platform.Cmd

data State =
    { queue :: Snackbar.Queue Action }

initialState :: forall r w i . State
initialState =
    { queue: Snackbar.initialQueue }

data Action
    = ShowBaseline
    | ShowLeading
    | ShowStacked
    | SnackbarClosed Snackbar.MessageId
    | Click Snackbar.MessageId

update :: forall r w i . Action -> State -> ( State, Cmd Action )
update w i model =
    case w i of
        ShowBaseline ->
            ( { model | queue = Snackbar.addMessage baselineMessage model.queue }
            , Cmd.none
            )

        ShowLeading ->
            ( { model | queue = Snackbar.addMessage leadingMessage model.queue }
            , Cmd.none
            )

        ShowStacked ->
            ( { model | queue = Snackbar.addMessage stackedMessage model.queue }
            , Cmd.none
            )

        SnackbarClosed messageId ->
            ( { model | queue = Snackbar.close messageId model.queue }, Cmd.none )

        Click messageId ->
            ( model, Cmd.none )

baselineMessage :: forall r w i . Snackbar.Message Action
baselineMessage =
    Snackbar.message "Can't send photo. Retry in 5 seconds."
        , actionButton = (Just "Retry")
        , onActionButtonClick = Click
        , actionIcon = (Just "close")

leadingMessage :: forall r w i . Snackbar.Message Action
leadingMessage =
    Snackbar.message "Your photo has been archived."
        , leading = true
        , actionButton = (Just "Undo")
        , onActionButtonClick = Click
        , actionIcon = (Just "close")

stackedMessage :: forall r w i . Snackbar.Message Action
stackedMessage =
    Snackbar.message "This item already has the label \"travel\". You can add a new label."
        , stacked = true
        , actionButton = (Just "Add a new label")
        , onActionButtonClick = Click
        , actionIcon = (Just "close")

render :: forall r w i . State -> CatalogPage Action
render model =
    { title: "Snackbar"
    , prelude: "Snackbars provide brief feedback about an operation through a message at the bottom of the screen."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-snackbar"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Snackbar"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-snackbar"
        }
    , hero: [ heroMessage ]
    , content =
        [ Button.raised
            (Button.defaultConfig
                { onClick = ShowBaseline
                , additionalAttributes = buttonMargin
            )
            "Baseline"
        , HH.text " "
        , Button.raised
            (Button.defaultConfig
                { onClick = ShowLeading
                , additionalAttributes = buttonMargin
            )
            "Leading"
        , HH.text " "
        , Button.raised
            (Button.defaultConfig
                { onClick = ShowStacked
                , additionalAttributes = buttonMargin
            )
            "Stacked"
        , Snackbar.snackbar
            (Snackbar.defaultConfig { onClosed: SnackbarClosed }
                , closeOnEscape = true
            )
            model.queue
        ]
    }

buttonMargin :: forall r w i . Array (IProp r i)
buttonMargin =
    [ HP.style "margin: 14px;" ]

heroMessage :: forall r w i . HH.HTML w i
heroMessage =
    HH.div
        [ HP.class_ "mdc-snackbar mdc-snackbar--open"
        , HP.style "position: relative; left: 0; transform: none;"
        ]
        [ HH.div
            [ HP.class_ mdc_snackbar__surface ]
            [ HH.div
                [ HP.class_ mdc_snackbar__label
                , HP.style "color: hsla(0,0%,100%,.87);"
                , HP.attr (AttrName "role") "status"
                , HP.attr (AttrName "aria-live") "polite"
                ]
                [ HH.text "Can't send photo. Retry in 5 seconds." ]
            , HH.div
                [ HP.class_ mdc_snackbar__actions ]
                [ HH.button
                    [ HP.class_ mdc_button
                    , HP.class_ mdc_snackbar__action
                    , HP.type_ "button"
                    ]
                    [ HH.text "Retry" ]
                , HH.button
                    [ HP.class_ mdc_icon_button
                    , HP.class_ mdc_snackbar__dismiss
                    , HP.class_ material_icons
                    ]
                    [ HH.text "close" ]
                ]
            ]
        ]
