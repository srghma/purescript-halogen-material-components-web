module Demo.Pages.Snackbar where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Snackbar as Snackbar
import Platform.Cmd

data Model =
    { queue :: Snackbar.Queue Msg }

defaultModel :: Model
defaultModel =
    { queue: Snackbar.initialQueue }

data Msg
    = ShowBaseline
    | ShowLeading
    | ShowStacked
    | SnackbarClosed Snackbar.MessageId
    | Click Snackbar.MessageId

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        ShowBaseline ->
            ( { model | queue = Snackbar.addMessage baselineMessage model.queue }
            , Cmd.none
            )

        ShowLeading ->
            ( { model | queue = Snackbar.addMessage leadingMessage model.queue }
            , Cmd.none
            )

        ShowStacked ->
            ( { model | queue = Snackbar.addMessage stackedMessage model.queue }
            , Cmd.none
            )

        SnackbarClosed messageId ->
            ( { model | queue = Snackbar.close messageId model.queue }, Cmd.none )

        Click messageId ->
            ( model, Cmd.none )

baselineMessage :: Snackbar.Message Msg
baselineMessage =
    Snackbar.message "Can't send photo. Retry in 5 seconds."
        # Snackbar.setActionButton (Just "Retry")
        # Snackbar.setOnActionButtonClick Click
        # Snackbar.setActionIcon (Just "close")

leadingMessage :: Snackbar.Message Msg
leadingMessage =
    Snackbar.message "Your photo has been archived."
        # Snackbar.setLeading true
        # Snackbar.setActionButton (Just "Undo")
        # Snackbar.setOnActionButtonClick Click
        # Snackbar.setActionIcon (Just "close")

stackedMessage :: Snackbar.Message Msg
stackedMessage =
    Snackbar.message "This item already has the label \"travel\". You can add a new label."
        # Snackbar.setStacked true
        # Snackbar.setActionButton (Just "Add a new label")
        # Snackbar.setOnActionButtonClick Click
        # Snackbar.setActionIcon (Just "close")

view :: Model -> CatalogPage Msg
view model =
    { title: "Snackbar"
    , prelude: "Snackbars provide brief feedback about an operation through a message at the bottom of the screen."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-snackbar"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Snackbar"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-snackbar"
        }
    , hero: [ heroMessage ]
    , content =
        [ Button.raised
            (Button.defaultConfig
                # Button.setOnClick ShowBaseline
                # Button.setAttributes buttonMargin
            )
            "Baseline"
        , HH.text " "
        , Button.raised
            (Button.defaultConfig
                # Button.setOnClick ShowLeading
                # Button.setAttributes buttonMargin
            )
            "Leading"
        , HH.text " "
        , Button.raised
            (Button.defaultConfig
                # Button.setOnClick ShowStacked
                # Button.setAttributes buttonMargin
            )
            "Stacked"
        , Snackbar.snackbar
            (Snackbar.defaultConfig { onClosed: SnackbarClosed }
                # Snackbar.setCloseOnEscape true
            )
            model.queue
        ]
    }

buttonMargin :: Array (HH.Attribute w i)
buttonMargin =
    [ style "margin" "14px" ]

heroMessage :: HH.HTML w i
heroMessage =
    HH.div
        [ HP.class_ "mdc-snackbar mdc-snackbar--open"
        , style "position" "relative"
        , style "left" "0"
        , style "transform" "none"
        ]
        [ HH.div
            [ HP.class_ mdc_snackbar__surface ]
            [ HH.div
                [ HP.class_ mdc_snackbar__label
                , style "color" "hsla(0,0%,100%,.87)"
                , HP.attr (AttrName "role") "status"
                , HP.attr (AttrName "aria-live") "polite"
                ]
                [ HH.text "Can't send photo. Retry in 5 seconds." ]
            , HH.div
                [ HP.class_ mdc_snackbar__actions ]
                [ HH.button
                    [ HP.class_ mdc_button
                    , HP.class_ mdc_snackbar__action
                    , HP.type_ "button"
                    ]
                    [ HH.text "Retry" ]
                , HH.button
                    [ HP.class_ mdc_icon_button
                    , HP.class_ mdc_snackbar__dismiss
                    , HP.class_ material_icons
                    ]
                    [ HH.text "close" ]
                ]
            ]
        ]
