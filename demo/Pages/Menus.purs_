module Demo.Pages.Menus where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.List as List
import HalogenMWC.List.Divider as ListDivider
import HalogenMWC.List.Item as List.Item
import HalogenMWC.Menu as Menu
import HalogenMWC.Typography as Typography

data Model =
    { open :: Boolean }

defaultModel :: Model
defaultModel =
    { open: false }

data Msg
    = Open
    | Close

update :: Msg -> Model -> Model
update w i model =
    case w i of
        Open ->
            { model | open = true }

        Close ->
            { model | open = false }

view :: Model -> CatalogPage Msg
view model =
    { title: "Menu"
    , prelude: "Menus display a list of choices on a transient sheet of material."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-menus"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Menu"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-menu"
        }
    , hero: [ heroMenu model ]
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Anchored menu" ]
        , HH.div [ Menu.surfaceAnchor ]
            [ Button.text (Button.defaultConfig # Button.setOnClick Open) "Open menu"
            , Menu.menu
                (Menu.defaultConfig
                    # Menu.setOpen model.open
                    # Menu.setOnClose Close
                )
                [ Array.list (List.defaultConfig # Array.setWrapFocus true)
                    (listItem "Passionfruit")
                    (List.concat
                        [ map listItem
                            [ "Orange"
                            , "Guava"
                            , "Pitaya"
                            ]
                        , [ ListDivider.listItem ListDivider.defaultConfig ]
                        , map listItem
                            [ "Pineapple"
                            , "Mango"
                            , "Papaya"
                            , "Lychee"
                            ]
                        ]
                    )
                ]
            ]
        ]
    }

listItem :: String -> ListItem Msg
listItem label =
    List.Item.listItem (List.Item.defaultConfig # List.Item.setOnClick Close) [ HH.text label ]

heroMenu :: Model -> HH.HTML w i
heroMenu model =
    HH.div
        [ HP.class_ "mdc-menu-surface mdc-menu-surface--open"
        , style "position" "relative"
        , style "transform-origin" "left top 0px"
        , style "left" "0px"
        , style "top" "0px"
        , style "z-index" "0"
        ]
        [ Array.list Array.defaultConfig
            (List.Item.listItem List.Item.defaultConfig [ HH.text "A Menu Item" ])
            [ List.Item.listItem List.Item.defaultConfig [ HH.text "Another Menu Item" ]
            ]
        ]
