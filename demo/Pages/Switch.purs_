module Demo.Pages.Switch where

import Browser.Dom
import Demo.HOC.CatalogPage
import Dict
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.FormField as FormField
import HalogenMWC.Switch as Switch
import Material.Classes.Typography
import Task

data Model =
    { switches :: Dict String Boolean }

defaultModel :: Model
defaultModel =
    { switches: Dict.fromList [ ( "hero-switch", true ) ] }

data Msg
    = Toggle String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        Toggle id ->
            ( { model
                | switches =
                    Dict.update id
                        (\state -> Just (not (Maybe.fromMaybe false state)))
                        model.switches
              }
            , Cmd.none
            )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

isChecked :: String -> Model -> Boolean
isChecked id model =
    Maybe.fromMaybe false (Dict.get id model.switches)

view :: Model -> CatalogPage Msg
view model =
    { title: "Switch"
    , prelude: "Switches communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-switches"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Switch"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-switch"
        }
    , hero: heroSwitch model
    , content =
        [ HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Switch" ]
        , demoSwitch model
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Focus Switch" ]
        , focusSwitch model
        ]
    }

heroSwitch :: Model -> Array (HH.HTML Msg)
heroSwitch model =
    let
        id =
            "hero-switch"
    in
    [ FormField.formField
        (FormField.defaultConfig
            # FormField.setLabel (Just "off/on")
            # FormField.setFor (Just id)
            # FormField.setOnClick (Toggle id)
        )
        [ Switch.switch
            (Switch.defaultConfig
                # Switch.setChecked (isChecked id model)
                # Switch.setOnChange (Toggle id)
            )
        ]
    ]

demoSwitch :: Model -> HH.HTML Msg
demoSwitch model =
    let
        id =
            "demo-switch"
    in
    FormField.formField
        (FormField.defaultConfig
            # FormField.setLabel (Just "off/on")
            # FormField.setFor (Just id)
            # FormField.setOnClick (Toggle id)
        )
        [ Switch.switch
            (Switch.defaultConfig
                # Switch.setChecked (isChecked id model)
                # Switch.setOnChange (Toggle id)
            )
        ]

focusSwitch :: Model -> HH.HTML Msg
focusSwitch model =
    let
        id =
            "my-switch"
    in
    HH.div []
        [ FormField.formField
            (FormField.defaultConfig
                # FormField.setLabel (Just "off/on")
                # FormField.setFor (Just id)
                # FormField.setOnClick (Toggle id)
                # FormField.setAttributes [ HP.id "my-form-field" ]
            )
            [ Switch.switch
                (Switch.defaultConfig
                    # Switch.setChecked (isChecked id model)
                    # Switch.setOnChange (Toggle id)
                    # Switch.setAttributes [ HP.id id ]
                )
            ]
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig # Button.setOnClick (Focus "my-switch"))
            "Focus switch"
        , Button.raised
            (Button.defaultConfig # Button.setOnClick (Focus "my-form-field"))
            "Focus form field"
        ]
