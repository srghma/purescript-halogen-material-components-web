module Demo.Pages.Drawer.Modal where
    ( State
    , Action(..)
    , initialState
    , update
    , view
    )

import Demo.DrawerPage as DrawerPage
import HalogenMWC.Drawer.Modal as Drawer.Modal

data State =
    { open :: Boolean
    , selectedIndex :: Int
    }

initialState :: forall r w i . State
initialState =
    { open: false
    , selectedIndex: 0
    }

data Action
    = OpenDrawer
    | CloseDrawer
    | SetSelectedIndex Int

update :: forall r w i . Action -> State -> State
update w i model =
    case w i of
        OpenDrawer ->
            { model | open = true }

        CloseDrawer ->
            { model | open = false }

        SetSelectedIndex index ->
            { model | selectedIndex = index }

view :: forall r w i . State -> DrawerPage Action
view model =
    { title: "Modal Drawer"
    , drawer =
        Drawer.Modal.drawer
            (Drawer.Modal.defaultConfig
                { open = model.open
                , onClose = CloseDrawer
            )
            (DrawerPage.drawerBody SetSelectedIndex model.selectedIndex)
    , scrim: Just (Drawer.Modal.scrim [] [])
    , onMenuClick: Just OpenDrawer
    }
