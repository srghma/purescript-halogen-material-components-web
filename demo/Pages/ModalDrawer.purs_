module Demo.Pages.ModalDrawer where
    ( Model
    , Msg(..)
    , defaultModel
    , update
    , view
    )

import Demo.DrawerPage as DrawerPage
import HalogenMWC.Drawer.Modal as ModalDrawer

data Model =
    { open :: Boolean
    , selectedIndex :: Int
    }

defaultModel :: forall r w i . Model
defaultModel =
    { open: false
    , selectedIndex: 0
    }

data Msg
    = OpenDrawer
    | CloseDrawer
    | SetSelectedIndex Int

update :: forall r w i . Msg -> Model -> Model
update w i model =
    case w i of
        OpenDrawer ->
            { model | open = true }

        CloseDrawer ->
            { model | open = false }

        SetSelectedIndex index ->
            { model | selectedIndex = index }

view :: forall r w i . Model -> DrawerPage Msg
view model =
    { title: "Modal Drawer"
    , drawer =
        ModalDrawer.drawer
            (ModalDrawer.defaultConfig
                # ModalDrawer.setOpen model.open
                # ModalDrawer.setOnClose CloseDrawer
            )
            (DrawerPage.drawerBody SetSelectedIndex model.selectedIndex)
    , scrim: Just (ModalDrawer.scrim [] [])
    , onMenuClick: Just OpenDrawer
    }
