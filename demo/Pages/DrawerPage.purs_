module Demo.Pages.DrawerPage

import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Drawer.Dismissible as DismissibleDrawer
import HalogenMWC.Drawer.Permanent as PermanentDrawer
import HalogenMWC.Icon as Icon
import HalogenMWC.List as List
import HalogenMWC.List.Divider as ListDivider
import HalogenMWC.List.Item as ListItem
import HalogenMWC.TopAppBar as TopAppBar

data DrawerPage msg =
    { title :: String
    , drawer :: Html msg
    , scrim :: Maybe (Html msg)
    , onMenuClick :: Maybe msg
    }

view :: (msg -> topMsg) -> DrawerPage msg -> Html topMsg
view lift { title, drawer, scrim, onMenuClick } =
    HH.map lift $
        HH.div drawerFrameRoot
            [ drawer
            , Maybe.fromMaybe (text "") scrim
            , HH.div [ DismissibleDrawer.appContent ]
                [ TopAppBar.regular TopAppBar.defaultConfig
                    [ TopAppBar.row []
                        [ TopAppBar.section [ TopAppBar.alignStart ]
                            [ case onMenuClick of
                                Just handleClick ->
                                    Icon.icon
                                        [ TopAppBar.navigationIcon
                                        , HH.Events.onClick handleClick
                                        ]
                                        "menu"

                                Nothing ->
                                    text ""
                            , HH.span [ TopAppBar.title ] [ HH.text title ]
                            ]
                        ]
                    ]
                , mainContent
                ]
            ]

drawerBody :: (Int -> msg) -> Int -> Array (Html msg)
drawerBody setSelectedIndex selectedIndex =
    let
        listItemConfig index =
            ListItem.defaultConfig
                # ListItem.setSelected
                    (if selectedIndex == index then
                        Just ListItem.activated

                     else
                        Nothing
                    )
                # ListItem.setOnClick (setSelectedIndex index)
    in
    [ PermanentDrawer.header []
        [ HH.h3 [ PermanentDrawer.title ] [ HH.text "Mail" ]
        , HH.h6 [ PermanentDrawer.subtitle ] [ HH.text "email@material.io" ]
        ]
    , PermanentDrawer.content []
        [ Array.group []
            [ Array.list Array.defaultConfig
                (ListItem.listItem (listItemConfig 0)
                    [ ListItem.graphic [] [ Icon.icon [] "inbox" ]
                    , HH.text "Inbox"
                    ]
                )
                [ ListItem.listItem (listItemConfig 1)
                    [ ListItem.graphic [] [ Icon.icon [] "star" ]
                    , HH.text "Star"
                    ]
                , ListItem.listItem (listItemConfig 2)
                    [ ListItem.graphic [] [ Icon.icon [] "send" ]
                    , HH.text "Sent Mail"
                    ]
                , ListItem.listItem (listItemConfig 3)
                    [ ListItem.graphic [] [ Icon.icon [] "drafts" ]
                    , HH.text "Drafts"
                    ]
                ]
            , ListDivider.group []
            , Array.subheader [] [ HH.text "Labels" ]
            , Array.list Array.defaultConfig
                (ListItem.listItem (listItemConfig 4)
                    [ ListItem.graphic [] [ Icon.icon [] "bookmark" ]
                    , HH.text "Family"
                    ]
                )
                [ ListItem.listItem (listItemConfig 5)
                    [ ListItem.graphic [] [ Icon.icon [] "bookmark" ]
                    , HH.text "Friends"
                    ]
                , ListItem.listItem (listItemConfig 6)
                    [ ListItem.graphic [] [ Icon.icon [] "bookmark" ]
                    , HH.text "Work"
                    ]
                , ListDivider.listItem ListDivider.defaultConfig
                , ListItem.listItem (listItemConfig 7)
                    [ ListItem.graphic [] [ Icon.icon [] "settings" ]
                    , HH.text "Settings"
                    ]
                , ListItem.listItem (listItemConfig 8)
                    [ ListItem.graphic [] [ Icon.icon [] "announcement" ]
                    , HH.text "Help & feedback"
                    ]
                ]
            ]
        ]
    ]

mainContent :: Html msg
mainContent =
    HH.div
        [ style "padding-left" "18px"
        , style "padding-right" "18px"
        , style "overflow" "auto"
        , style "height" "100%"
        , style "box-sizing" "border-box"
        , TopAppBar.fixedAdjust
        , DismissibleDrawer.appContent
        ]
        (List.repeat 4 $ HH.p [] [ HH.text loremIpsum ])

loremIpsum :: String
loremIpsum =
    "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum."

drawerFrameRoot :: Array (HH.Attribute msg)
drawerFrameRoot =
    [ style "display" "-ms-flexbox"
    , style "display" "flex"
    , style "height" "100vh"
    ]
