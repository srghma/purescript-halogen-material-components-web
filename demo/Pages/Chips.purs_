module Demo.Pages.Chips where

import Browser.Dom
import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA

import HalogenMWC.Button as Button
import HalogenMWC.Chip.Action as ActionChip
import HalogenMWC.Chip.Choice as ChoiceChip
import HalogenMWC.Chip.Filter as FilterChip
import HalogenMWC.Chip.Input as InputChip
import HalogenMWC.ChipSet.Action as ActionChipSet
import HalogenMWC.ChipSet.Choice as ChoiceChipSet
import HalogenMWC.ChipSet.Filter as FilterChipSet
import HalogenMWC.ChipSet.Input as InputChipSet
import HalogenMWC.Typography as Typography
import Set
import Task

data Model =
    { chip :: Maybe String
    , size :: Size
    , inputChips :: Array String
    , input :: String
    , accessories :: Set String
    , contacts :: Set String
    , focus :: String
    }

defaultModel :: Model
defaultModel =
    { chip: Just "Chip One"
    , size: Small
    , inputChips: [ "Portland", "Biking" ]
    , input: ""
    , accessories: Set.singleton "Tops"
    , contacts: Set.singleton "Alice"
    , focus: "One"
    }

data Size
    = ExtraSmall
    | Small
    | Medium
    | Large
    | ExtraLarge

data Msg
    = ChipChanged String
    | SizeChanged Size
    | AccessoriesChanged String
    | ContactChanged String
    | InputChanged String
    | InputChipDeleted String
    | KeyPressed Int
    | FocusChanged String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update w i model =
    case w i of
        ChipChanged chip ->
            ( { model | chip = Just chip }, Cmd.none )

        SizeChanged size ->
            ( { model | size = size }, Cmd.none )

        InputChanged newInput ->
            ( { model | input = newInput }, Cmd.none )

        AccessoriesChanged accessory ->
            ( { model
                | accessories =
                    (if Set.member accessory model.accessories then
                        Set.remove accessory

                     else
                        Set.insert accessory
                    )
                        model.accessories
              }
            , Cmd.none
            )

        ContactChanged contact ->
            ( { model
                | contacts =
                    (if Set.member contact model.contacts then
                        Set.remove contact

                     else
                        Set.insert contact
                    )
                        model.contacts
              }
            , Cmd.none
            )

        InputChipDeleted inputChip ->
            ( { model | inputChips = Array.filter ((/=) inputChip) model.inputChips }
            , Cmd.none
            )

        KeyPressed keyCode ->
            let
                backspace =
                    8

                enter =
                    13

                trimmedInput =
                    String.trim model.input
            in
            if keyCode == enter && not (String.isEmpty trimmedInput) then
                ( { model
                    | input = ""
                    , inputChips =
                        if not (List.member trimmedInput model.inputChips) then
                            model.inputChips <> [ trimmedInput ]

                        else
                            model.inputChips
                  }
                , Cmd.none
                )

            else if keyCode == backspace && String.isEmpty model.input then
                ( { model
                    | inputChips =
                        Array.take (List.length model.inputChips - 1)
                            model.inputChips
                  }
                , Cmd.none
                )

            else
                ( model, Cmd.none )

        FocusChanged focus ->
            ( { model | focus = focus }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title: "Chips"
    , prelude: "Chips are compact elements that allow users to enter information, select a choice, filter content, or trigger an action."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-chips"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Chips"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-chips"
        }
    , hero: heroChips model
    , content =
        [ HH.h2 [ Typography.subtitle1 ] [ HH.text "Choice Chips" ]
        , choiceChips model
        , HH.h2 [ Typography.subtitle1 ] [ HH.text "Filter Chips" ]
        , HH.h3 [ Typography.body2 ] [ HH.text "No leading icon" ]
        , filterChips1 model
        , HH.h3 [ Typography.body2 ] [ HH.text "With leading icon" ]
        , filterChips2 model
        , HH.h2 [ Typography.subtitle1 ] [ HH.text "Action Chips" ]
        , actionChips model
        , HH.h2 [ Typography.subtitle1 ] [ HH.text "Shaped Chips" ]
        , shapedChips model
        , HH.h2 [ Typography.subtitle1 ] [ HH.text "Input Chips" ]
        , inputChips model
        , HH.h2 [ Typography.subtitle1 ] [ HH.text "Focus Chips" ]
        , focusChips model
        ]
    }

heroChips :: Model -> Array (HH.HTML Msg)
heroChips model =
    [ ChoiceChipSet.chipSet
        (ChoiceChipSet.defaultConfig { toLabel: identity }
            # ChoiceChipSet.setSelected model.chip
            # ChoiceChipSet.setOnChange ChipChanged
        )
        [ ChoiceChip.chip ChoiceChip.defaultConfig "Chip One"
        , ChoiceChip.chip ChoiceChip.defaultConfig "Chip Two"
        , ChoiceChip.chip ChoiceChip.defaultConfig "Chip Three"
        , ChoiceChip.chip ChoiceChip.defaultConfig "Chip Four"
        ]
    ]

choiceChips :: Model -> HH.HTML Msg
choiceChips model =
    let
        toLabel size =
            case size of
                ExtraSmall ->
                    "Extra Small"

                Small ->
                    "Small"

                Medium ->
                    "Medium"

                Large ->
                    "Large"

                ExtraLarge ->
                    "Extra Large"
    in
    ChoiceChipSet.chipSet
        (ChoiceChipSet.defaultConfig { toLabel: toLabel }
            # ChoiceChipSet.setSelected (Just model.size)
            # ChoiceChipSet.setOnChange SizeChanged
        )
        [ ChoiceChip.chip ChoiceChip.defaultConfig ExtraSmall
        , ChoiceChip.chip ChoiceChip.defaultConfig Small
        , ChoiceChip.chip ChoiceChip.defaultConfig Medium
        , ChoiceChip.chip ChoiceChip.defaultConfig Large
        , ChoiceChip.chip ChoiceChip.defaultConfig ExtraLarge
        ]

inputChips :: Model -> HH.HTML Msg
inputChips model =
    HH.div
        [ HP.style "position: relative"
        , HP.style "display: flex"
        ]
        [ InputChipSet.chipSet []
            (map
                (\label ->
                    ( label
                    , InputChip.chip
                        (InputChip.defaultConfig
                            # InputChip.setOnDelete (InputChipDeleted label)
                        )
                        label
                    )
                )
                model.inputChips
            )
        , HH.input
            [ HP.value model.input
            , HH.Events.onInput InputChanged
            , HH.Events.on "keydown" (Decode.map KeyPressed HH.Events.keyCode)
            ]
            []
        ]

filterChips1 :: Model -> HH.HTML Msg
filterChips1 model =
    let
        chip accessory =
            FilterChip.chip
                (FilterChip.defaultConfig
                    # FilterChip.setSelected (Set.member accessory model.accessories)
                    # FilterChip.setOnChange (AccessoriesChanged accessory)
                )
                accessory
    in
    FilterChipSet.chipSet []
        (map chip
            [ "Tops"
            , "Bottoms"
            , "Shoes"
            , "Accessories"
            ]
        )

filterChips2 :: Model -> HH.HTML Msg
filterChips2 model =
    let
        chip label =
            FilterChip.chip
                (FilterChip.defaultConfig
                    # FilterChip.setSelected (Set.member label model.contacts)
                    # FilterChip.setIcon (Just "face")
                    # FilterChip.setOnChange (ContactChanged label)
                )
                label
    in
    FilterChipSet.chipSet []
        (map chip
            [ "Alice"
            , "Bob"
            , "Charlie"
            , "Danielle"
            ]
        )

actionChips :: Model -> HH.HTML Msg
actionChips model =
    let
        chip ( icon, label ) =
            ActionChip.chip
                (ActionChip.defaultConfig
                    # ActionChip.setIcon (Just icon)
                )
                label
    in
    ActionChipSet.chipSet []
        (map chip
            [ ( "event", "Add to calendar" )
            , ( "bookmark", "Bookmark" )
            , ( "alarm", "Set alarm" )
            , ( "directions", "Get directions" )
            ]
        )

shapedChips :: Model -> HH.HTML w i
shapedChips model =
    let
        chip label =
            ActionChip.chip
                (ActionChip.defaultConfig
                    # ActionChip.setAttributes [ HP.style "border-radius: 4px" ]
                )
                label
    in
    ActionChipSet.chipSet []
        (map chip
            [ "Bookcase"
            , "TV Stand"
            , "Sofas"
            , "Office chairs"
            ]
        )

focusChips :: Model -> HH.HTML Msg
focusChips model =
    HH.div []
        [ ChoiceChipSet.chipSet
            (ChoiceChipSet.defaultConfig { toLabel: identity }
                # ChoiceChipSet.setSelected (Just model.focus)
                # ChoiceChipSet.setOnChange FocusChanged
                # ChoiceChipSet.setAttributes [ HP.id "my-chips" ]
            )
            [ ChoiceChip.chip ChoiceChip.defaultConfig "One"
            , ChoiceChip.chip ChoiceChip.defaultConfig "Two"
            ]
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig
                # Button.setOnClick (Focus "my-chips")
            )
            "Focus"
        ]
