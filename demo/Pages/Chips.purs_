module Demo.Pages.Chips where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA

import HalogenMWC.Button as Button
import HalogenMWC.Chip.Action as Chip.Action
import HalogenMWC.Chip.Choice as Chip.Choice
import HalogenMWC.Chip.Filter as Chip.Filter
import HalogenMWC.Chip.Input as Chip.Input
import HalogenMWC.ChipSet.Action as ChipSet.Action
import HalogenMWC.ChipSet.Choice as ChipSet.Choice
import HalogenMWC.ChipSet.Filter as ChipSet.Filter
import HalogenMWC.ChipSet.Input as ChipSet.Input
import Material.Classes.Typography
import Set

data State =
    { chip :: Maybe String
    , size :: Size
    , inputChips :: Array String
    , input :: String
    , accessories :: Set String
    , contacts :: Set String
    , focus :: String
    }

initialState :: forall r w i . State
initialState =
    { chip: Just "Chip One"
    , size: Small
    , inputChips: [ "Portland", "Biking" ]
    , input: ""
    , accessories: Set.singleton "Tops"
    , contacts: Set.singleton "Alice"
    , focus: "One"
    }

data Size
    = ExtraSmall
    | Small
    | Medium
    | Large
    | ExtraLarge

data Action
    = ChipChanged String
    | SizeChanged Size
    | AccessoriesChanged String
    | ContactChanged String
    | InputChanged String
    | Chip.InputDeleted String
    | KeyPressed Int
    | FocusChanged String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

update :: forall r w i . Action -> State -> ( State, Cmd Action )
update w i model =
    case w i of
        ChipChanged chip ->
            ( { model | chip = Just chip }, Cmd.none )

        SizeChanged size ->
            ( { model | size = size }, Cmd.none )

        InputChanged newInput ->
            ( { model | input = newInput }, Cmd.none )

        AccessoriesChanged accessory ->
            ( { model
                | accessories =
                    (if Set.member accessory model.accessories then
                        Set.remove accessory

                     else
                        Set.insert accessory
                    )
                        model.accessories
              }
            , Cmd.none
            )

        ContactChanged contact ->
            ( { model
                | contacts =
                    (if Set.member contact model.contacts then
                        Set.remove contact

                     else
                        Set.insert contact
                    )
                        model.contacts
              }
            , Cmd.none
            )

        Chip.InputDeleted inputChip ->
            ( { model | inputChips = Array.filter ((/=) inputChip) model.inputChips }
            , Cmd.none
            )

        KeyPressed keyCode ->
            let
                backspace =
                    8

                enter =
                    13

                trimmedInput =
                    String.trim model.input
            in
            if keyCode == enter && not (String.isEmpty trimmedInput) then
                ( { model
                    | input = ""
                    , inputChips =
                        if not (List.member trimmedInput model.inputChips) then
                            model.inputChips <> [ trimmedInput ]

                        else
                            model.inputChips
                  }
                , Cmd.none
                )

            else if keyCode == backspace && String.isEmpty model.input then
                ( { model
                    | inputChips =
                        Array.take (List.length model.inputChips - 1)
                            model.inputChips
                  }
                , Cmd.none
                )

            else
                ( model, Cmd.none )

        FocusChanged focus ->
            ( { model | focus = focus }, Cmd.none )

        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

render :: forall r w i . State -> CatalogPage Action
render model =
    { title: "Chips"
    , prelude: "Chips are compact elements that allow users to enter information, select a choice, filter content, or trigger an action."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-chips"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Chips"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-chips"
        }
    , hero: heroChips model
    , content =
        [ HH.h2 [ mdc_typography____subtitle1 ] [ HH.text "Choice Chips" ]
        , choiceChips model
        , HH.h2 [ mdc_typography____subtitle1 ] [ HH.text "Filter Chips" ]
        , HH.h3 [ mdc_typography____body2 ] [ HH.text "No leading icon" ]
        , filterChips1 model
        , HH.h3 [ mdc_typography____body2 ] [ HH.text "With leading icon" ]
        , filterChips2 model
        , HH.h2 [ mdc_typography____subtitle1 ] [ HH.text "Action Chips" ]
        , actionChips model
        , HH.h2 [ mdc_typography____subtitle1 ] [ HH.text "Shaped Chips" ]
        , shapedChips model
        , HH.h2 [ mdc_typography____subtitle1 ] [ HH.text "Input Chips" ]
        , inputChips model
        , HH.h2 [ mdc_typography____subtitle1 ] [ HH.text "Focus Chips" ]
        , focusChips model
        ]
    }

heroChips :: forall r w i . State -> Array (HH.HTML Action)
heroChips model =
    [ Chip.ChoiceSet.chipSet
        (Chip.ChoiceSet.defaultConfig { toLabel: identity }
            , selected = model.chip
            , onChange = ChipChanged
        )
        [ Chip.Choice.chip Chip.Choice.defaultConfig "Chip One"
        , Chip.Choice.chip Chip.Choice.defaultConfig "Chip Two"
        , Chip.Choice.chip Chip.Choice.defaultConfig "Chip Three"
        , Chip.Choice.chip Chip.Choice.defaultConfig "Chip Four"
        ]
    ]

choiceChips :: forall r w i . State -> HH.HTML Action
choiceChips model =
    let
        toLabel size =
            case size of
                ExtraSmall ->
                    "Extra Small"

                Small ->
                    "Small"

                Medium ->
                    "Medium"

                Large ->
                    "Large"

                ExtraLarge ->
                    "Extra Large"
    in
    Chip.ChoiceSet.chipSet
        (Chip.ChoiceSet.defaultConfig { toLabel: toLabel }
            , selected = (Just model.size)
            , onChange = SizeChanged
        )
        [ Chip.Choice.chip Chip.Choice.defaultConfig ExtraSmall
        , Chip.Choice.chip Chip.Choice.defaultConfig Small
        , Chip.Choice.chip Chip.Choice.defaultConfig Medium
        , Chip.Choice.chip Chip.Choice.defaultConfig Large
        , Chip.Choice.chip Chip.Choice.defaultConfig ExtraLarge
        ]

inputChips :: forall r w i . State -> HH.HTML Action
inputChips model =
    HH.div
        [ HP.style "position: relative; display: flex;"
        ]
        [ Chip.InputSet.chipSet []
            (map
                (\label ->
                    ( label
                    , Chip.Input.chip
                        (Chip.Input.defaultConfig
                            { onDelete = (Chip.InputDeleted label)
                        )
                        label
                    )
                )
                model.inputChips
            )
        , HH.input
            [ HP.value model.input
            , HH.Events.onInput InputChanged
            , HH.Events.on "keydown" (Decode.map KeyPressed HH.Events.keyCode)
            ]
            []
        ]

filterChips1 :: forall r w i . State -> HH.HTML Action
filterChips1 model =
    let
        chip accessory =
            Chip.Filter.chip
                (Chip.Filter.defaultConfig
                    { selected = (Set.member accessory model.accessories)
                    , onChange = (AccessoriesChanged accessory)
                )
                accessory
    in
    Chip.FilterSet.chipSet []
        (map chip
            [ "Tops"
            , "Bottoms"
            , "Shoes"
            , "Accessories"
            ]
        )

filterChips2 :: forall r w i . State -> HH.HTML Action
filterChips2 model =
    let
        chip label =
            Chip.Filter.chip
                (Chip.Filter.defaultConfig
                    { selected = (Set.member label model.contacts)
                    , icon = (Just "face")
                    , onChange = (ContactChanged label)
                )
                label
    in
    Chip.FilterSet.chipSet []
        (map chip
            [ "Alice"
            , "Bob"
            , "Charlie"
            , "Danielle"
            ]
        )

actionChips :: forall r w i . State -> HH.HTML Action
actionChips model =
    let
        chip ( icon, label ) =
            Chip.Action.chip
                (Chip.Action.defaultConfig
                    { icon = (Just icon)
                )
                label
    in
    Chip.ActionSet.chipSet []
        (map chip
            [ ( "event", "Add to calendar" )
            , ( "bookmark", "Bookmark" )
            , ( "alarm", "Set alarm" )
            , ( "directions", "Get directions" )
            ]
        )

shapedChips :: forall r w i . State -> HH.HTML w i
shapedChips model =
    let
        chip label =
            Chip.Action.chip
                (Chip.Action.defaultConfig
                    { additionalAttributes = [ HP.style "border-radius: 4px;" ]
                )
                label
    in
    Chip.ActionSet.chipSet []
        (map chip
            [ "Bookcase"
            , "TV Stand"
            , "Sofas"
            , "Office chairs"
            ]
        )

focusChips :: forall r w i . State -> HH.HTML Action
focusChips model =
    HH.div []
        [ Chip.ChoiceSet.chipSet
            (Chip.ChoiceSet.defaultConfig { toLabel: identity }
                , selected = (Just model.focus)
                , onChange = FocusChanged
                , additionalAttributes = [ HP.id_ "my-chips" ]
            )
            [ Chip.Choice.chip Chip.Choice.defaultConfig "One"
            , Chip.Choice.chip Chip.Choice.defaultConfig "Two"
            ]
        , HH.text "\x00A0"
        , Button.raised
            (Button.defaultConfig
                { onClick = (Focus "my-chips")
            )
            "Focus"
        ]
