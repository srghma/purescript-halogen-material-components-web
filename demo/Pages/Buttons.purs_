module Demo.Pages.Buttons where

import Browser.Dom
import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Typography as Typography
import Task

data Model =
    {}

defaultModel :: Model
defaultModel =
    {}

data Msg
    = Focus String
    | Focused (Result Browser.Dom.Error ())

update :: Msg -> Model -> ( Model, Cmd Msg )
update msg model =
    case msg of
        Focus id ->
            ( model, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( model, Cmd.none )

view :: Model -> CatalogPage Msg
view model =
    { title = "Button"
    , prelude = "Buttons communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars."
    , resources =
        { materialDesignGuidelines = Just "https://material.io/go/design-buttons"
        , documentation = Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Button"
        , sourceCode = Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-button"
        }
    , hero = heroButtons
    , content =
        [ HH.h3 [ Typography.subtitle1 ] [ HH.text "Text Button" ]
        , textButtons
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Raised Button" ]
        , raisedButtons
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Unelevated Button" ]
        , unelevatedButtons
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Outlined Button" ]
        , outlinedButtons
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Shaped Button" ]
        , shapedButtons
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Link Button" ]
        , linkButtons
        , HH.h3 [ Typography.subtitle1 ] [ HH.text "Focus Button" ]
        , focusButton
        ]
    }

heroButtons :: Array (Html msg)
heroButtons =
    let
        config =
            Button.defaultConfig # Button.setAttributes [ heroMargin ]
    in
    [ Button.text config "Text"
    , Button.raised config "Raised"
    , Button.unelevated config "Unelevated"
    , Button.outlined config "Outlined"
    ]

textButtons :: Html msg
textButtons =
    buttonsRow Button.text []

raisedButtons :: Html msg
raisedButtons =
    buttonsRow Button.raised []

unelevatedButtons :: Html msg
unelevatedButtons =
    buttonsRow Button.unelevated []

outlinedButtons :: Html msg
outlinedButtons =
    buttonsRow Button.outlined []

shapedButtons :: Html msg
shapedButtons =
    buttonsRow Button.unelevated [ style "border-radius" "18px" ]

linkButtons :: Html msg
linkButtons =
    buttonsRow
        (\config label -> Button.text (config # Button.setHref (Just "#")) label)
        []

focusButton :: Html Msg
focusButton =
    HH.div []
        [ Button.raised
            (Button.defaultConfig
                # Button.setAttributes [ HP.id "my-button" ]
            )
            "Button"
        , HH.text "\u{00A0}"
        , Button.raised (Button.defaultConfig # Button.setOnClick (Focus "my-button")) "Focus"
        , HH.text "\u{00A0}"
        , Button.raised
            (Button.defaultConfig
                # Button.setHref (Just "#")
                # Button.setAttributes [ HP.id "my-link-button" ]
            )
            "Link button"
        , HH.text "\u{00A0}"
        , Button.raised (Button.defaultConfig # Button.setOnClick (Focus "my-link-button")) "Focus"
        ]

buttonsRow :: (Button.Config msg -> String -> Html msg) -> Array (HH.Attribute msg) -> Html msg
buttonsRow button additionalAttributes =
    let
        config =
            Button.defaultConfig
                # Button.setAttributes (rowMargin :: additionalAttributes)
    in
    HH.div []
        [ button config "Default"
        , button (config # Button.setDense true) "Dense"
        , button (config # Button.setIcon (Just "favorite")) "Icon"
        ]

heroMargin :: HH.Attribute msg
heroMargin =
    style "margin" "16px 32px"

rowMargin :: HH.Attribute msg
rowMargin =
    style "margin" "8px 16px"
