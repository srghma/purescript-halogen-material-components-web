module Demo.Pages.Slider where

import Demo.HOC.CatalogPage (CatalogPage)
import Data.Map (Map)
import Data.Map as Map
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Slider as Slider
import Material.Classes.Typography

type State = { sliders :: Map String Float }

initialState :: forall r w i . State
initialState =
    { sliders =
        Map.fromList
            [ ( "hero-slider" /\ "25" )
            , ( "continuous-slider" /\ "25" )
            , ( "discrete-slider" /\ "25" )
            , ( "discrete-slider-with-tick-marks" /\ "25" )
            ]
    }

data Action
    = Changed String Float
    | Focus String
    
handleAction :: Action -> H.HalogenM State Action ChildSlots Message Aff Unit
handleAction =
    case _ of
        Changed id value ->
            ( { sliders = Map.insert id value state.sliders } )

        Focus id ->
            H.liftEffect $ focusById id

        
            

catalogPage :: CatalogPage
catalogPage =
    { title: "Slider"
    , prelude: "Sliders let users select from a range of values by moving the slider thumb."
    , resources:
        { materialDesignGuidelines: Just "https://material.io/go/design-sliders"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Slider"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-slider"
        }
    , hero: [ heroSlider state ]
    , content:
        [ HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Continuous" ]
        , continuousSlider state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Discrete" ]
        , discreteSlider state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Discrete with Tick Marks" ]
        , discreteSliderWithTickMarks state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Focus Slider" ]
        , focusSlider state
        ]
    }

heroSlider :: forall r w i . State -> HH.HTML w Action
heroSlider state =
    let
        id =
            "hero-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Map.get id state.sliders)
            , onInput = (Changed id)
        )

continuousSlider :: forall r w i . State -> HH.HTML w Action
continuousSlider state =
    let
        id =
            "continuous-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Map.get id state.sliders)
            , onInput = (Changed id)
            , min = Just 0
            , max = Just 50
        )

discreteSlider :: forall r w i . State -> HH.HTML w Action
discreteSlider state =
    let
        id =
            "discrete-slider"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Map.get id state.sliders)
            , onInput = (Changed id)
            , discrete = true
            , min = Just 0
            , max = Just 50
            , step = Just 1
        )

discreteSliderWithTickMarks :: forall r w i . State -> HH.HTML w Action
discreteSliderWithTickMarks state =
    let
        id =
            "discrete-slider-with-tick-marks"
    in
    Slider.slider
        (Slider.defaultConfig
            { value = (Map.get id state.sliders)
            , onInput = (Changed id)
            , discrete = true
            , min = Just 0
            , max = Just 50
            , step = Just 1
            , displayMarkers = true
        )

focusSlider :: forall r w i . State -> HH.HTML w Action
focusSlider state =
    let
        id =
            "my-slider"
    in
    HH.div_
        [ Slider.slider
            (Slider.defaultConfig
                { value = (Map.get id state.sliders)
                , onInput = (Changed id)
                , additionalAttributes = [ HP.id_ id ]
            )
        , HH.text "\x00A0"
        , Button.button Button.Raised
            (Button.defaultConfig { additionalAttributes = [ HE.onClick (const $ Focus id) ] })
            [ HH.text "Focus" ]
        ]
