module Demo.Pages.Selects where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Select as Select
import HalogenMWC.Select.Item as Select.Item
import Material.Classes.Typography

type State = { hero :: Maybe Fruit
    , filled :: Maybe Fruit
    , outlined :: Maybe Fruit
    , filledWithIcon :: Maybe Fruit
    , outlinedWithIcon :: Maybe Fruit
    , focused :: Maybe Fruit
    }

initialState :: forall r w i . State
initialState =
    { hero: Nothing
    , filled: Nothing
    , outlined: Nothing
    , filledWithIcon: Nothing
    , outlinedWithIcon: Nothing
    , focused: Nothing
    }

data Fruit
    = Apple
    | Orange
    | Banana

data Action
    = HeroChanged (Maybe Fruit)
    | FilledChanged (Maybe Fruit)
    | OutlinedChanged (Maybe Fruit)
    | FilledWithIconChanged (Maybe Fruit)
    | OutlinedWithIconChanged (Maybe Fruit)
    | FocusedChanged (Maybe Fruit)
    | Focus String
    | Focused (Result Browser.Dom.Error ())

handleAction :: Action -> H.HalogenM State Action ChildSlots Message Aff Unit
handleAction =
    case _ of
        HeroChanged hero ->
            ( { hero = hero } )

        FilledChanged filled ->
            ( { filled = filled } )

        OutlinedChanged outlined ->
            ( { outlined = outlined } )

        FilledWithIconChanged filledWithIcon ->
            ( { filledWithIcon = filledWithIcon } )

        OutlinedWithIconChanged outlinedWithIcon ->
            ( { outlinedWithIcon = outlinedWithIcon } )

        FocusedChanged focused ->
            ( { focused = focused } )

        Focus id ->
            ( state, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( state )

catalogPage :: CatalogPage
catalogPage =
    { title: "Select"
    , prelude: "Selects allow users to select from a single-option menu."
    , resources:
        { materialDesignGuidelines: Just "https://material.io/go/design-text-fields"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Select"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-select"
        }
    , hero: [ heroSelect state ]
    , content:
        [ HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Filled" ]
        , filledSelect state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Outlined" ]
        , outlinedSelect state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Filled with Icon" ]
        , filledWithIconSelect state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Outlined with Icon" ]
        , outlinedWithIconSelect state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Focus Select" ]
        , focusSelect state
        ]
    }

heroSelect :: forall r w i . State -> HH.HTML w Action
heroSelect state =
    Select.filled
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just state.hero)
            , onChange = HeroChanged
        )
        firstItem
        remainingItems

firstItem :: forall r w i . Select.Item (Maybe a) w i
firstItem =
    Select.Item.selectItem
        (Select.Item.defaultConfig { value: Nothing })
        [ HH.text "" ]

remainingItems :: forall r w i . Array (Select.Item (Maybe Fruit) w i)
remainingItems =
    [ Select.Item.selectItem
        (Select.Item.defaultConfig { value: Just Apple })
        [ HH.text "Apple" ]
    , Select.Item.selectItem
        (Select.Item.defaultConfig { value: Just Orange })
        [ HH.text "Orange" ]
    , Select.Item.selectItem
        (Select.Item.defaultConfig { value: Just Banana })
        [ HH.text "Banana" ]
    ]

filledSelect :: forall r w i . State -> HH.HTML w Action
filledSelect state =
    Select.filled
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just state.filled)
            , onChange = FilledChanged
        )
        firstItem
        remainingItems

outlinedSelect :: forall r w i . State -> HH.HTML w Action
outlinedSelect state =
    Select.outlined
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just state.outlined)
            , onChange = OutlinedChanged
        )
        firstItem
        remainingItems

filledWithIconSelect :: forall r w i . State -> HH.HTML w Action
filledWithIconSelect state =
    Select.filled
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just state.filledWithIcon)
            , leadingIcon = (Just (Select.icon [] "favorite"))
            , onChange = FilledWithIconChanged
        )
        firstItem
        remainingItems

outlinedWithIconSelect :: forall r w i . State -> HH.HTML w Action
outlinedWithIconSelect state =
    Select.outlined
        (Select.defaultConfig
            { label = (Just "Fruit")
            , selected = (Just state.outlinedWithIcon)
            , leadingIcon = (Just (Select.icon [] "favorite"))
            , onChange = OutlinedWithIconChanged
        )
        firstItem
        remainingItems

focusSelect :: forall r w i . State -> HH.HTML w Action
focusSelect state =
    HH.div
        [ HP.style "display: flex; align-items: center;"
        ]
        [ Select.filled
            (Select.defaultConfig
                { selected = (Just state.focused)
                , onChange = FocusedChanged
                , additionalAttributes = [ HP.id_ "my-select" ]
            )
            firstItem
            remainingItems
        , HH.text "\x00A0"
        , Button.button Button.Raised
            (Button.defaultConfig { additionalAttributes = [ HE.onClick (const $ Focus "my-select") ] })
            [ HH.text "Focus" ]
        ]
