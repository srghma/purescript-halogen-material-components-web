module Demo.Pages.RadioButtons where

import Demo.HOC.CatalogPage
import Data.Map (Map)
import Data.Map as Map
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.FormField as FormField
import HalogenMWC.Radio as Radio
import Material.Classes.Typography

data State =
    { radios :: Map String String }

initialState :: forall r w i . State
initialState =
    { radios =
        Map.fromList
            [ ( "hero" /\ "radio-buttons-hero-radio-1" )
            , ( "example" /\ "radio-buttons-example-radio-1" )
            ]
    }

data Action
    = Set String String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

handleAction :: Action -> H.HalogenM State Action ChildSlots Message Aff Unit
handleAction =
    case _ of
        Set group index ->
            ( { radios = Map.insert group index state.radios } )

        Focus id ->
            ( state, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( state )

isSelected :: forall r w i . String -> String -> State -> Boolean
isSelected group index state =
    Map.get group state.radios
        # map ((==) index)
        # Maybe.fromMaybe false

catalogPage :: CatalogPage
catalogPage =
    { title: "Radio Button"
    , prelude: "Buttons communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars."
    , resources:
        { materialDesignGuidelines: Just "https://material.io/go/design-radio-buttons"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Radio"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-radio"
        }
    , hero: [ heroRadioGroup state ]
    , content:
        [ HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Radio Buttons" ]
        , exampleRadioGroup state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Focus Radio Button" ]
        , focusRadio
        ]
    }

heroRadio :: forall r w i . State -> String -> String -> HH.HTML w Action
heroRadio state group index =
    Radio.radio
        (Radio.defaultConfig
            { checked = (isSelected group index state)
            , onChange = (Set group index)
            , additionalAttributes = [ HP.style "margin: 0 10px;" ]
        )

heroRadioGroup :: forall r w i . State -> HH.HTML w Action
heroRadioGroup state =
    HH.div []
        [ heroRadio state "hero" "radio-buttons-hero-radio-1"
        , heroRadio state "hero" "radio-buttons-hero-radio-2"
        ]

radio :: forall r w i . State -> String -> String -> String -> HH.HTML w Action
radio state group index label =
    FormField.formField
        (FormField.defaultConfig
            { label = (Just label)
            , for = (Just index)
            , onClick = (Set group index)
            , additionalAttributes = [ HP.style "margin: 0 10px;" ]
        )
        [ Radio.radio
            (Radio.defaultConfig
                { checked = (isSelected group index state)
                , onChange = (Set group index)
            )
        ]

exampleRadioGroup :: forall r w i . State -> HH.HTML w Action
exampleRadioGroup state =
    HH.div []
        [ radio state "example" "radio-buttons-example-radio-1" "Radio 1"
        , radio state "example" "radio-buttons-example-radio-2" "Radio 2"
        ]

focusRadio :: forall r w i . HH.HTML w Action
focusRadio =
    HH.div []
        [ Radio.radio
            (Radio.defaultConfig { additionalAttributes = [ HP.id_ "my-radio" ])
        , HH.text "\x00A0"
        , Button.button Button.Raised
            (Button.defaultConfig { additionalAttributes = [ HE.onClick (const $ Focus "my-radio") ] })
            [ HH.text "Focus" ]
        ]
