module Demo.Pages.Switch where

import Demo.HOC.CatalogPage
import Data.Map (Map)
import Data.Map as Map
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.FormField as FormField
import HalogenMWC.Switch as Switch
import Material.Classes.Typography

data State =
    { switches :: Map String Boolean }

initialState :: forall r w i . State
initialState =
    { switches: Map.fromList [ ( "hero-switch", true ) ] }

data Action
    = Toggle String
    | Focus String
    | Focused (Result Browser.Dom.Error ())

handleAction :: Action -> H.HalogenM State Action ChildSlots Message Aff Unit
handleAction =
    case _ of
        Toggle id ->
            ( {  switches =
                    Map.handleAction id
                        (\state -> Just (not (Maybe.fromMaybe false state)))
                        state.switches
              }
            
            )

        Focus id ->
            ( state, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( state )

isChecked :: forall r w i . String -> State -> Boolean
isChecked id state =
    Maybe.fromMaybe false (Map.get id state.switches)

catalogPage :: CatalogPage
catalogPage =
    { title: "Switch"
    , prelude: "Switches communicate an action a user can take. They are typically placed throughout your UI, in places like dialogs, forms, cards, and toolbars."
    , resources:
        { materialDesignGuidelines: Just "https://material.io/go/design-switches"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Switch"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-switch"
        }
    , hero: heroSwitch state
    , content:
        [ HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Switch" ]
        , demoSwitch state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Focus Switch" ]
        , focusSwitch state
        ]
    }

heroSwitch :: forall r w i . State -> Array (HH.HTML w Action)
heroSwitch state =
    let
        id =
            "hero-switch"
    in
    [ FormField.formField
        (FormField.defaultConfig
            { label = (Just "off/on")
            , for = (Just id)
            , onClick = (Toggle id)
        )
        [ Switch.switch
            (Switch.defaultConfig
                { checked = (isChecked id state)
                , onChange = (Toggle id)
            )
        ]
    ]

demoSwitch :: forall r w i . State -> HH.HTML w Action
demoSwitch state =
    let
        id =
            "demo-switch"
    in
    FormField.formField
        (FormField.defaultConfig
            { label = (Just "off/on")
            , for = (Just id)
            , onClick = (Toggle id)
        )
        [ Switch.switch
            (Switch.defaultConfig
                { checked = (isChecked id state)
                , onChange = (Toggle id)
            )
        ]

focusSwitch :: forall r w i . State -> HH.HTML w Action
focusSwitch state =
    let
        id =
            "my-switch"
    in
    HH.div []
        [ FormField.formField
            (FormField.defaultConfig
                { label = (Just "off/on")
                , for = (Just id)
                , onClick = (Toggle id)
                , additionalAttributes = [ HP.id_ "my-form-field" ]
            )
            [ Switch.switch
                (Switch.defaultConfig
                    { checked = (isChecked id state)
                    , onChange = (Toggle id)
                    , additionalAttributes = [ HP.id_ id ]
                )
            ]
        , HH.text "\x00A0"
        , Button.button Button.Raised
            (Button.defaultConfig { additionalAttributes = [ HE.onClick (const $ Focus "my-switch") ] })
            [ HH.text "Focus switch" ]
        , Button.button Button.Raised
            (Button.defaultConfig { additionalAttributes = [ HE.onClick (const $ Focus "my-form-field") ] })
            [ HH.text "Focus form field" ]
        ]
