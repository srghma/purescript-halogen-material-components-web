module Demo.Pages.Menus where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.List as List
import HalogenMWC.List.Divider as List.Divider
import HalogenMWC.List.Item as List.Item
import HalogenMWC.Menu as Menu
import Material.Classes.Typography

data State =
    { open :: Boolean }

initialState :: forall r w i . State
initialState =
    { open: false }

data Action
    = Open
    | Close

handleAction :: forall r w i . Action -> State -> State
handleAction =
    case _ of
        Open ->
            { open = true }

        Close ->
            { open = false }

catalogPage :: CatalogPage
catalogPage =
    { title: "Menu"
    , prelude: "Menus display a list of choices on a transient sheet of material."
    , resources:
        { materialDesignGuidelines: Just "https://material.io/go/design-menus"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Menu"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-menu"
        }
    , hero: [ heroMenu state ]
    , content:
        [ HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Anchored menu" ]
        , HH.div [ HP.class_ mdc_menu_surface____anchor ]
            [ Button.button Button.Text (Button.defaultConfig { additionalAttributes = [ HE.onClick (const Open) ] }) [ HH.text "Open menu" ]
            , Menu.menu
                (Menu.defaultConfig
                    { open = state.open
                    , onClose = Close
                )
                [ List.list (List.defaultConfig { wrapFocus = true)
                    (listItem "Passionfruit")
                    (List.concat
                        [ map listItem
                            [ "Orange"
                            , "Guava"
                            , "Pitaya"
                            ]
                        , [ List.Divider.listItem List.Divider.defaultConfig ]
                        , map listItem
                            [ "Pineapple"
                            , "Mango"
                            , "Papaya"
                            , "Lychee"
                            ]
                        ]
                    )
                ]
            ]
        ]
    }

listItem :: forall r w i . String -> ListItem Action
listItem label =
    List.Item.listItem (List.Item.defaultConfig { onClick = Close) [ HH.text label ]

heroMenu :: forall r w i . State -> HH.HTML w i
heroMenu state =
    HH.div
        [ HP.class_ "mdc-menu-surface mdc-menu-surface--open"
        , HP.style "position: relative; transform-origin: left top 0px; left: 0px; top: 0px; z-index: 0;"
        ]
        [ List.list List.defaultConfig
            (List.Item.listItem List.Item.defaultConfig [ HH.text "A Menu Item" ])
            [ List.Item.listItem List.Item.defaultConfig [ HH.text "Another Menu Item" ]
            ]
        ]
