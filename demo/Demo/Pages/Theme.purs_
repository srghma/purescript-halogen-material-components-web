module Demo.Pages.Theme where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Elevation as Elevation
import HalogenMWC.Theme as Theme
import Material.Classes.Typography

data State =
    Unit

initialState :: forall r w i . State
initialState = unit

data Action
    = NoOp

update :: forall r w i . Action -> State -> State
update w i model =
    model

render :: forall r w i . State -> CatalogPage Action
render model =
    { title: "Theme"
    , prelude: "Color in Material Design is inspired by bold hues juxtaposed with muted environments, deep shadows, and bright highlights."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-color-theming"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Theme"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-theme"
        }
    , hero =
        [ Button.button Button.Text (Button.defaultConfig { additionalAttributes = heroMargin) "Text"
        , Button.button Button.Raised (Button.defaultConfig { additionalAttributes = heroMargin) "Raised"
        , Button.button Button.Outlined (Button.defaultConfig { additionalAttributes = heroMargin) "Outlined"
        ]
    , content =
        [ HH.legend [ mdc_typography____subtitle1 ] [ HH.text "Theme colors as text" ]
        , themeColorsAsText
        , HH.legend [ mdc_typography____subtitle1 ] [ HH.text "Theme colors as background" ]
        , themeColorsAsBackground
        , HH.legend [ mdc_typography____subtitle1 ] [ HH.text "Text on background" ]
        , textOnBackground
        , HH.legend [ mdc_typography____subtitle1 ] [ HH.text "Text on primary" ]
        , textOnPrimary
        , HH.legend [ mdc_typography____subtitle1 ] [ HH.text "Text on secondary" ]
        , textOnSecondary
        , HH.legend [ mdc_typography____subtitle1 ]
            [ HH.text "Text on user-defined light background" ]
        , textOnLightBackground
        , HH.legend [ mdc_typography____subtitle1 ]
            [ HH.text "Text on user-defined dark background" ]
        , textOnDarkBackground
        ]
    }

themeColorsAsText :: forall r w i . HH.HTML w i
themeColorsAsText =
    HH.div demoThemeColorGroup
        [ HH.div (mdc_theme____primary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Primary" ] ]
        , HH.div (mdc_theme____secondary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Secondary" ] ]
        ]

themeColorsAsBackground :: forall r w i . HH.HTML w i
themeColorsAsBackground =
    HH.div demoThemeColorGroup
        [ HH.div
            (mdc_theme____primaryBg :: forall r w i . mdc_theme____on_primary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Primary" ] ]
        , HH.div
            (mdc_theme____secondaryBg :: forall r w i . mdc_theme____on_secondary :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Secondary" ] ]
        , HH.div
            (mdc_theme____background :: forall r w i . mdc_theme____text_primary_on_background :: demoThemeColorSwatches)
            [ HH.div demoThemeColorSwatch [ HH.text "Background" ] ]
        ]

textOnBackground :: forall r w i . HH.HTML w i
textOnBackground =
    HH.div demoThemeColorGroup
        [ HH.div (mdc_theme____background :: demoThemeTextRow)
            [ HH.span (mdc_theme____text_primary_on_background :: demoThemeTextStyle)
                [ HH.text "Primary" ]
            , HH.span (mdc_theme____text_secondary_on_background :: demoThemeTextStyle)
                [ HH.text "Secondary" ]
            , HH.span (mdc_theme____text_hint_on_background :: demoThemeTextStyle)
                [ HH.text "Hint" ]
            , HH.span (mdc_theme____text_disabled_on_background :: demoThemeTextStyle)
                [ HH.text "Disabled" ]
            , HH.span (mdc_theme____text_icon_on_background :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnPrimary :: forall r w i . HH.HTML w i
textOnPrimary =
    HH.div demoThemeColorGroup
        [ HH.div (mdc_theme____primaryBg :: demoThemeTextRow)
            [ HH.span (mdc_theme____on_primary :: demoThemeTextStyle)
                [ HH.text "Text" ]
            , HH.span (mdc_theme____on_primary :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnSecondary :: forall r w i . HH.HTML w i
textOnSecondary =
    HH.div demoThemeColorGroup
        [ HH.div (mdc_theme____secondaryBg :: demoThemeTextRow)
            [ HH.span (mdc_theme____on_secondary :: demoThemeTextStyle)
                [ HH.text "Text" ]
            , HH.span (mdc_theme____on_secondary :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnLightBackground :: forall r w i . HH.HTML w i
textOnLightBackground =
    HH.div demoThemeColorGroup
        [ HH.div (demoThemeBgCustomLight <> demoThemeTextRow)
            [ HH.span (mdc_theme____text_primary_on_light :: demoThemeTextStyle)
                [ HH.text "Primary" ]
            , HH.span (mdc_theme____text_secondary_on_light :: demoThemeTextStyle)
                [ HH.text "Secondary" ]
            , HH.span (mdc_theme____text_hint_on_light :: demoThemeTextStyle)
                [ HH.text "Hint" ]
            , HH.span (mdc_theme____text_disabled_on_light :: demoThemeTextStyle)
                [ HH.text "Disabled" ]
            , HH.span (mdc_theme____text_icon_on_light :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

textOnDarkBackground :: forall r w i . HH.HTML w i
textOnDarkBackground =
    HH.div demoThemeColorGroup
        [ HH.div (demoThemeBgCustomDark <> demoThemeTextRow)
            [ HH.span (mdc_theme____text_primary_on_dark :: demoThemeTextStyle)
                [ HH.text "Primary" ]
            , HH.span (mdc_theme____text_secondary_on_dark :: demoThemeTextStyle)
                [ HH.text "Secondary" ]
            , HH.span (mdc_theme____text_hint_on_dark :: demoThemeTextStyle)
                [ HH.text "Hint" ]
            , HH.span (mdc_theme____text_disabled_on_dark :: demoThemeTextStyle)
                [ HH.text "Disabled" ]
            , HH.span (mdc_theme____text_icon_on_dark :: demoThemeIconStyle)
                [ HH.text "favorite" ]
            ]
        ]

heroMargin :: forall r w i . Array (IProp r i)
heroMargin =
    [ HP.style "margin: 16px 32px;" ]

demoThemeColorGroup :: forall r w i . Array (IProp r i)
demoThemeColorGroup =
    [ HP.style "padding: 16px 0;" ]

demoThemeColorSwatches :: forall r w i . Array (IProp r i)
demoThemeColorSwatches =
    [ HP.style "display: -ms-inline-flexbox; display: inline-flex; -ms-flex-direction: column; flex-direction: column; margin-right: 16px;"
    , Elevation.z2
    ]

demoThemeColorSwatch :: forall r w i . Array (IProp r i)
demoThemeColorSwatch =
    [ HP.style "display: inline-block; -webkit-box-sizing: border-box; box-sizing: border-box; width: 150px; height: 50px; line-height: 50px; text-align: center; margin-bottom: 8px; border-radius: 4px;"
    ]

demoThemeTextRow :: forall r w i . Array (IProp r i)
demoThemeTextRow =
    [ HP.style "display: -ms-inline-flexbox; display: inline-flex; -webkit-box-sizing: border-box; box-sizing: border-box; padding: 16px; border: 1px solid #f0f0f0; -ms-flex-align: center; align-items: center; -ms-flex-direction: row; flex-direction: row;"
    ]

demoThemeTextStyle :: forall r w i . Array (IProp r i)
demoThemeTextStyle =
    [ HP.style "padding: 0 16px;" ]

demoThemeIconStyle :: forall r w i . Array (IProp r i)
demoThemeIconStyle =
    HP.class_ material_icons :: demoThemeTextStyle

demoThemeBgCustomLight :: forall r w i . Array (IProp r i)
demoThemeBgCustomLight =
    [ HP.style "background-color: #ddd;" ]

demoThemeBgCustomDark :: forall r w i . Array (IProp r i)
demoThemeBgCustomDark =
    [ HP.style "background-color: #d1d1d1;" ]
