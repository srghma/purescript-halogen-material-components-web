module Demo.Pages.TabBar where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Button as Button
import HalogenMWC.Tab as Tab
import HalogenMWC.TabBar as TabBar
import Material.Classes.Typography

data State =
    { activeHeroTab :: Int
    , activeIconTab :: Int
    , activeStackedTab :: Int
    , activeScrollingTab :: Int
    }

initialState :: forall r w i . State
initialState =
    { activeHeroTab: 0
    , activeIconTab: 0
    , activeStackedTab: 0
    , activeScrollingTab: 0
    }

data Action
    = SetActiveHeroTab Int
    | SetActiveIconTab Int
    | SetActiveStackedTab Int
    | SetActiveScrollingTab Int
    | Focus String
    | Focused (Result Browser.Dom.Error ())

handleAction :: Action -> H.HalogenM State Action ChildSlots Message Aff Unit
handleAction =
    case _ of
        SetActiveHeroTab index ->
            ( { state | activeHeroTab = index } )

        SetActiveIconTab index ->
            ( { state | activeIconTab = index } )

        SetActiveStackedTab index ->
            ( { state | activeStackedTab = index } )

        SetActiveScrollingTab index ->
            ( { state | activeScrollingTab = index } )

        Focus id ->
            ( state, Task.attempt Focused (Browser.Dom.focus id) )

        Focused _ ->
            ( state )

catalogPage :: CatalogPage
catalogPage =
    { title: "Tab Bar"
    , prelude: "Tabs organize and allow navigation between groups of content that are related and at the same level of hierarchy. The Tab Bar contains the Tab Scroller and Tab components."
    , resources:
        { materialDesignGuidelines: Just "https://material.io/go/design-tabs"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-TabBar"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-tab-bar"
        }
    , hero: [ heroTabs state "tabs-hero-tabs" ]
    , content:
        [ HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Tabs with icons next to labels" ]
        , tabsWithIcons state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ]
            [ HH.text "Tabs with icons above labels and indicators restricted to content" ]
        , tabsWithStackedIcons state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Scrolling tabs" ]
        , scrollingTabs state
        , HH.h3 [ HP.class_ mdc_typography____subtitle1 ] [ HH.text "Focus tabs" ]
        , focusTabs state
        ]
    }

heroTabs :: forall r w i . State -> String -> HH.HTML w Action
heroTabs state index =
    TabBar.tabBar TabBar.defaultConfig
        [ Tab.tab
            (Tab.defaultConfig
                { active = (state.activeHeroTab == 0)
                , onClick = (SetActiveHeroTab 0)
            )
            { label: "Home", icon: Nothing }
        , Tab.tab
            (Tab.defaultConfig
                { active = (state.activeHeroTab == 1)
                , onClick = (SetActiveHeroTab 1)
            )
            { label: "Merchandise", icon: Nothing }
        , Tab.tab
            (Tab.defaultConfig
                { active = (state.activeHeroTab == 2)
                , onClick = (SetActiveHeroTab 2)
            )
            { label: "About Us", icon: Nothing }
        ]

tabsWithIcons :: forall r w i . State -> HH.HTML w Action
tabsWithIcons state =
    let
        config index =
            Tab.defaultConfig
                { active = (state.activeIconTab == index)
                , onClick = (SetActiveIconTab index)
    in
    TabBar.tabBar TabBar.defaultConfig
        [ Tab.tab (config 0) { label: "Recents", icon: Just "access_time" }
        , Tab.tab (config 1) { label: "Nearby", icon: Just "near_me" }
        , Tab.tab (config 2) { label: "Favorites", icon: Just "favorite" }
        ]

tabsWithStackedIcons :: forall r w i . State -> HH.HTML w Action
tabsWithStackedIcons state =
    let
        config index =
            Tab.defaultConfig
                { active = (state.activeStackedTab == index)
                , onClick = (SetActiveStackedTab index)
    in
    TabBar.tabBar
        (TabBar.defaultConfig
            { stacked = true
            , indicatorSpansContent = true
        )
        [ Tab.tab (config 0) { label: "Recents", icon: Just "access_time" }
        , Tab.tab (config 1) { label: "Nearby", icon: Just "near_me" }
        , Tab.tab (config 2) { label: "Favorites", icon: Just "favorite" }
        ]

scrollingTabs :: forall r w i . State -> HH.HTML w Action
scrollingTabs state =
    let
        config index =
            Tab.defaultConfig
                { active = (state.activeScrollingTab == index)
                , onClick = (SetActiveScrollingTab index)
    in
    TabBar.tabBar TabBar.defaultConfig
        (List.indexedMap
            (\index label ->
                Tab.tab (config index) { label: "Tab " <> label, icon: Nothing }
            )
            [ "One", "Two", "Three", "Four", "Five", "Six", "Seven", "Eight" ]
        )

focusTabs :: forall r w i . State -> HH.HTML w Action
focusTabs state =
    HH.div []
        [ TabBar.tabBar
            (TabBar.defaultConfig
                { additionalAttributes = [ HP.id_ "my-tabs" ]
            )
            [ Tab.tab
                (Tab.defaultConfig
                    { active = (state.activeHeroTab == 0)
                    , onClick = (SetActiveHeroTab 0)
                )
                { label: "Home", icon: Nothing }
            , Tab.tab
                (Tab.defaultConfig
                    { active = (state.activeHeroTab == 1)
                    , onClick = (SetActiveHeroTab 1)
                )
                { label: "Merchandise", icon: Nothing }
            , Tab.tab
                (Tab.defaultConfig
                    { active = (state.activeHeroTab == 2)
                    , onClick = (SetActiveHeroTab 2)
                )
                { label: "About Us", icon: Nothing }
            ]
        , HH.text "\x00A0"
        , Button.button Button.Raised
            (Button.defaultConfig { additionalAttributes = [ HE.onClick (const $ Focus "my-tabs") ] })
            [ HH.text "Focus" ]
        ]
