module Demo.Pages.Ripple where

import Demo.HOC.CatalogPage
import Protolude
import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen as H
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Elevation as Elevation
import HalogenMWC.Ripple as Ripple
import Material.Classes.Typography

data State =
    Unit

initialState :: forall r w i . State
initialState = unit

data Action
    = NoOp

update :: forall r w i . Action -> State -> State
update w i model =
    model

render :: forall r w i . State -> CatalogPage Action
render model =
    { title: "Ripple"
    , prelude: "Ripples are visual representations used to communicate the status of a component or interactive element."
    , resources =
        { materialDesignGuidelines: Just "https://material.io/go/design-states"
        , documentation: Just "https://package.elm-lang.org/packages/aforemny/material-components-web-elm/latest/Material-Ripple"
        , sourceCode: Just "https://github.com/material-components/material-components-web/tree/master/packages/mdc-ripple"
        }
    , hero: [ HH.div demoBox [ HH.text "Click here!", Ripple.bounded Ripple.defaultConfig ] ]
    , content =
        [ HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Bounded Ripple" ]
        , HH.div demoBox
            [ HH.text "Interact with me!"
            , Ripple.bounded Ripple.defaultConfig
            ]
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Unbounded Ripple" ]
        , HH.div demoIcon
            [ HH.text "favorite"
            , Ripple.unbounded Ripple.defaultConfig
            ]
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Theme Color: Primary" ]
        , HH.div demoBox
            [ HH.text "Primary"
            , Ripple.bounded (Ripple.defaultConfig { color = (Just Ripple.primary))
            ]
        , HH.h3 [ mdc_typography____subtitle1 ] [ HH.text "Theme Color: Secondary" ]
        , HH.div demoBox
            [ HH.text "Secondary"
            , Ripple.bounded (Ripple.defaultConfig { color = (Just Ripple.accent))
            ]
        ]
    }

demoBox :: forall r w i . Array (IProp r i)
demoBox =
    [ HP.style "display: flex; align-items: center; justify-content: center; width: 200px; height: 100px; padding: 1rem; cursor: pointer; user-select: none; background-color: #fff; overflow: hidden; position: relative;"
    , Elevation.z2
    , HP.tabindex 0
    ]

demoIcon :: forall r w i . Array (IProp r i)
demoIcon =
    [ HP.class_ material_icons
    , HP.style "width: 24px; height: 24px; padding: 12px; border-radius: 50%; position: relative;"
    ]
