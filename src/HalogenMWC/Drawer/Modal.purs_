module HalogenMWC.Drawer.Modal where

import Protolude

import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Material.Classes.Drawer

type Config r i
  = { open :: Boolean
    , additionalAttributes :: Array (IProp r i)
    , onClose :: Maybe (Event -> i)
    }

defaultConfig :: Config r i
defaultConfig =
  { open: false
  , additionalAttributes: []
  , onClose: Nothing
  }

drawer :: Config r i -> Array (HH.HTML w i) -> HH.HTML w i
drawer (config@{ additionalAttributes }) nodes =
  HH.element (ElemName "mdc-drawer"
    ( Array.catMaybes
        [ rootCs
        , modalCs
        , openProp config
        , closeHandler config
        ]
        <> additionalAttributes
    )
    nodes

content :: Array (IProp r i) -> Array (HH.HTML w i) -> HH.HTML w i
content attributes nodes = HH.div ([ HP.class_ mdc_drawer__content ] <> attributes) nodes

header :: Array (IProp r i) -> Array (HH.HTML w i) -> HH.HTML w i
header additionalAttributes nodes = HH.div ([ HP.class_ mdc_drawer__header ] <> additionalAttributes) nodes

title :: IProp r i
title = HP.class_ mdc_drawer__title

subtitle :: IProp r i
subtitle = HP.class_ mdc_drawer__subtitle

rootCs :: Maybe (IProp r i)
rootCs = Just (HP.class_ mdc_drawer)

modalCs :: Maybe (IProp r i)
modalCs = Just (HP.class_ mdc_drawer____modal)

openProp :: Config r i -> Maybe (IProp r i)
openProp { open } = Just (HP.prop (PropName "open") open)

closeHandler :: Config r i -> Maybe (IProp r i)
closeHandler { onClose } = map (HE.on "MDCDrawer:close" <<< Decode.succeed) onClose

scrim :: Array (IProp r i) -> Array (HH.HTML w i) -> HH.HTML w i
scrim additionalAttributes nodes = HH.div ([ HP.class_ mdc_drawer_scrim ] <> additionalAttributes) nodes
