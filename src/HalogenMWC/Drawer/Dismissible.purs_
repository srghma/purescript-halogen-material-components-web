module HalogenMWC.Drawer.Dismissible where

import Protolude
import DOM.HTML.Indexed as I
import MaterialIconsFont.Classes
import Web.Event.Event

import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Material.Classes.Drawer

type Config i =
  { open :: Boolean
    , additionalAttributes :: Array (IProp I.HTMLdiv i)
    , onClose :: Maybe (Event -> i)
    }

defaultConfig :: forall i . Config i
defaultConfig =
  { open: false
  , additionalAttributes: []
  , onClose: Nothing
  }

drawer :: Config i -> Array (HH.HTML w i) -> HH.HTML w i
drawer config nodes =
  HH.element (ElemName "mdc-drawer")
    ( Array.catMaybes
        [ rootCs
        , dismissibleCs
        , openProp config
        , closeHandler config
        ]
        <> config.additionalAttributes
    )
    nodes

content :: Array (IProp r i) -> Array (HH.HTML w i) -> HH.HTML w i
content attributes nodes = HH.div ([ HP.class_ mdc_drawer__content ] <> attributes) nodes

header :: Array (IProp r i) -> Array (HH.HTML w i) -> HH.HTML w i
header additionalAttributes nodes = HH.div ([ HP.class_ mdc_drawer__header ] <> config.additionalAttributes) nodes

title :: IProp r i
title = HP.class_ mdc_drawer__title

subtitle :: IProp r i
subtitle = HP.class_ mdc_drawer__subtitle

rootCs :: Maybe (IProp r i)
rootCs = Just (HP.class_ mdc_drawer)

dismissibleCs :: Maybe (IProp r i)
dismissibleCs = Just (HP.class_ mdc_drawer____dismissible)

openProp :: Config i -> Maybe (IProp r i)
openProp { open } = Just (HP.prop (PropName "open") open)

closeHandler :: Config i -> Maybe (IProp r i)
closeHandler { onClose } = map (HE.on "MDCDrawer:close" <<< Decode.succeed) onClose

appContent :: IProp r i
appContent = HP.class_ mdc_drawer_app_content
