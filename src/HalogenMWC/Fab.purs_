module HalogenMWC.Fab where

import Protolude
import DOM.HTML.Indexed as I
import MaterialIconsFont.Classes
import Web.Event.Event

import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties as HP
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Material.Classes.Fab

type Config i =
  { mini :: Boolean
    , exited :: Boolean
    , additionalAttributes :: Array (IProp I.HTMLdiv i)
    , onClick :: Maybe (Event -> i)
    }

defaultConfig :: forall i . Config i
defaultConfig =
  { mini: false
  , exited: false
  , onClick: Nothing
  , additionalAttributes: []
  }

fab :: Config i -> String -> HH.HTML w i
fab config iconName =
  HH.element (ElemName "mdc-fab")
    ( Array.catMaybes
        [ rootCs
        , miniCs config
        , exitedCs config
        , clickHandler config
        , tabIndexProp 0
        ]
        <> config.additionalAttributes
    )
    [ rippleElt
    , iconElt iconName
    ]

tabIndexProp :: Int -> Maybe (IProp r i)
tabIndexProp tabIndex = Just (HP.prop (PropName "tabIndex") tabIndex)

rootCs :: Maybe (IProp r i)
rootCs = Just mdc_fab

miniCs :: Config i -> Maybe (IProp r i)
miniCs { mini } =
  if mini then
    Just mdc_fab____mini
  else
    Nothing

exitedCs :: Config i -> Maybe (IProp r i)
exitedCs { exited } =
  if exited then
    Just mdc_fab____exited
  else
    Nothing

rippleElt :: forall w i . HH.HTML w i
rippleElt = HH.div [ HP.class_ mdc_fab__ripple ] []

iconElt :: String -> HH.HTML w i
iconElt iconName = HH.span [ HP.class_ material_icons, HP.class_ mdc_fab__icon ] [ HH.text iconName ]

clickHandler :: Config i -> Maybe (IProp r i)
clickHandler { onClick } = map HE.onClick onClick
