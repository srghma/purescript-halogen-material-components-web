module HalogenMWC.Ripple where

import Protolude
import DOM.HTML.Indexed as I
import MaterialIconsFont.Classes
import Web.Event.Event

import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Events as HE
import Halogen.HTML.Properties as HP
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Material.Classes.Ripple

type Config i =
  { color :: Maybe Color
    , additionalAttributes :: Array (IProp I.HTMLdiv i)
    }

defaultConfig :: forall i . Config i
defaultConfig =
  { color: Nothing
  , additionalAttributes: []
  }

data Color
  = Primary
  | Accent

primary :: Color
primary = Primary

accent :: Color
accent = Accent

ripple :: Boolean -> Config i -> HH.HTML w i
ripple isUnbounded config =
  HH.element (ElemName "mdc-ripple")
    ( Array.catMaybes
        [ unboundedProp isUnbounded
        , unboundedData isUnbounded
        , colorCs config
        , rippleSurface
        , Just (style "position" "absolute")
        , Just (style "top" "0")
        , Just (style "left" "0")
        , Just (style "right" "0")
        , Just (style "bottom" "0")
        ]
        <> config.additionalAttributes
    )
    []

bounded :: forall w i . Config i -> HH.HTML w i
bounded = ripple false

unbounded :: forall w i . Config i -> HH.HTML w i
unbounded = ripple true

rippleSurface :: Maybe (IProp r i)
rippleSurface = Just (HP.class_ mdc_ripple_surface)

colorCs :: Config i -> Maybe (IProp r i)
colorCs { color } = case color of
  Just Primary -> Just (HP.class_ mdc_ripple_surface____primary)
  Just Accent -> Just (HP.class_ mdc_ripple_surface____accent)
  Nothing -> Nothing

unboundedProp :: Boolean -> Maybe (IProp r i)
unboundedProp isUnbounded = Just (HP.prop (PropName "unbounded") isUnbounded)

unboundedData :: Boolean -> Maybe (IProp r i)
unboundedData isUnbounded =
  if isUnbounded then
    Just (HP.attr (AttrName "data-mdc-ripple-is-unbounded") "")
  else
    Nothing
