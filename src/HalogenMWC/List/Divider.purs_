module HalogenMWC.Array.Divider where

import Protolude

import Data.Array as Array
import Data.Maybe as Maybe
import Halogen (AttrName(..))
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import HalogenMWC.Array.Item (ArrayItem)
import HalogenMWC.Array.Item as ArrayItem
import Material.Classes.List

type Config r i
  = { inset :: Boolean
    , padded :: Boolean
    , additionalAttributes :: Array (IProp r i)
    }

defaultConfig :: Config r i
defaultConfig =
  { inset: false
  , padded: false
  , additionalAttributes: []
  }

listItem :: Config r i -> ArrayItem r i
listItem (config@{ additionalAttributes }) =
  ArrayItem.ArrayItemDivider
    $ HH.li
        ( Array.catMaybes
            [ listDividerCs
            , separatorRoleAttr
            , insetCs config
            , paddedCs config
            ]
            <> additionalAttributes
        )
        []

listDividerCs :: Maybe (IProp r i)
listDividerCs = Just (HP.class_ mdc_list_divider)

separatorRoleAttr :: Maybe (IProp r i)
separatorRoleAttr = Just (HP.attr "role" "separator")

insetCs { inset } =
  if inset then
    Just (HP.class_ mdc_list_divider____inset)
  else
    Nothing

paddedCs :: Config r i -> Maybe (IProp r i)
paddedCs { padded } =
  if padded then
    Just (HP.class_ mdc_list_divider____padded)
  else
    Nothing

group :: Array (IProp r i) -> HH.HTML w i
group additionalAttributes = HH.hr (Array.catMaybes [ listDividerCs ] <> additionalAttributes) []
