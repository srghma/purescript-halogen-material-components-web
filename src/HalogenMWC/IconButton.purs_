module HalogenMWC.IconButton where

import Protolude
import DOM.HTML.Indexed as I
import MaterialIconsFont.Classes
import Web.Event.Event

import Data.Array as Array
import Data.Maybe as Maybe
import Halogen
import Halogen.HTML (IProp)
import Halogen.HTML as HH
import Halogen.HTML.Properties as HP
import Halogen.HTML.Properties.ARIA as Halogen.HTML.Properties.ARIA
import Material.Classes.IconButton

type Config i =
  { disabled :: Boolean
    , label :: Maybe String
    , additionalAttributes :: Array (IProp I.HTMLdiv i)
    , onClick :: Maybe (Event -> i)
    }

defaultConfig :: forall i . Config i
defaultConfig =
  { disabled: false
  , label: Nothing
  , additionalAttributes: []
  , onClick: Nothing
  }

iconButton :: Config i -> String -> HH.HTML w i
iconButton config iconName =
  HH.element (ElemName "mdc-icon-button")
    ( Array.catMaybes
        [ rootCs
        , materialIconsCs
        , tabIndexProp
        , clickHandler config
        ]
        <> config.additionalAttributes
    )
    [ HH.text iconName ]

custom :: Config i -> Array (HH.HTML w i) -> HH.HTML w i
custom config nodes =
  HH.element (ElemName "mdc-icon-button")
    ( Array.catMaybes
        [ rootCs
        , tabIndexProp
        , clickHandler config
        ]
        <> config.additionalAttributes
    )
    nodes

rootCs :: Maybe (IProp r i)
rootCs = Just (HP.class_ mdc_icon_button)

materialIconsCs :: Maybe (IProp r i)
materialIconsCs = Just (HP.class_ material_icons)

tabIndexProp :: Maybe (IProp r i)
tabIndexProp = Just (HP.tabindex 0)

clickHandler :: Config i -> Maybe (IProp r i)
clickHandler config = map HE.onClick config.onClick
